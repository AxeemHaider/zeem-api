package org.octabyte.zeem.API;

import com.google.api.server.spi.config.*;
import com.google.appengine.api.datastore.Cursor;
import com.google.appengine.api.datastore.QueryResultIterator;
import com.google.appengine.api.taskqueue.Queue;
import com.google.appengine.api.taskqueue.QueueFactory;
import com.google.appengine.api.taskqueue.TaskOptions;
import com.googlecode.objectify.Key;
import com.googlecode.objectify.Ref;
import com.googlecode.objectify.cmd.Query;
import org.octabyte.zeem.API.Entity.CommentResponse;
import org.octabyte.zeem.API.Helper.ApiHelper;
import org.octabyte.zeem.API.Helper.Datastore;
import org.octabyte.zeem.Datastore.*;
import org.octabyte.zeem.Helper.DataType;
import org.octabyte.zeem.Helper.Utils;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static org.octabyte.zeem.Helper.OfyService.ofy;

/**
 * Zeem API version v1 - Defining Account EndPoints
 */
@Api(
        name = "zeem",
        version = "v1",
        apiKeyRequired = AnnotationBoolean.TRUE
)
public class StoryApi {

    /**
     * Create a story
     * @param userId    How is created story
     * @param mode      Story Mode Private or Public
     * @param story     Story object contain caption, source and type
     * @return          Story object
     */
    public Story createStory(@Named("userId") Long userId, @Named("mode")DataType.Mode mode, Stories story){

        // Create a current time when Story is posted
        Long storyTimeHr = System.currentTimeMillis();

        // Generate auto storyId
        Long storyId = Datastore.autoGeneratedId();

        // Inform users about this story
        Boolean inform = false;

        // Create userKey from userId
        Key userKey = Key.create(User.class, userId);

        // Hold list of user stories
        List<Stories> stories = new ArrayList<>();

        // Story Number
        int storyNum = 0;

        // Hold story object
        Story userStory = null;

        // Check user has already started any story or not
        List<Story> userStoryList = ofy().load().type(Story.class).ancestor(userKey).list();

        //  Check story mode either this mode is available or not
        if(userStoryList != null) {
            for (Story storyItem : userStoryList) {
                if (storyItem.getMode() == mode) {
                    userStory = storyItem;
                }
            } // end for loop
        } // end if

        if(userStoryList == null || userStory == null) { // First time user is created story (Every day)
            userStory = new Story(storyId, userKey, mode);
            userStory.setUpdatedOn(storyTimeHr); // Add Time when first time story is created
            inform = true;
        }else{ // User has already some stories
            // Update the stories count
            userStory.setStoriesCount( userStory.getStoriesCount() + 1 );
            // Get already added user stories
            stories = userStory.getStories();
            // Update story num
            storyNum = stories.size();
        }

        // Set storyNum to story variable
        story.setStoryNum(storyNum);
        // Set posted on story
        story.setPostedOn(storyTimeHr);

        // Adding the story into list
        stories.add(story);
        // Add this list into userStory
        userStory.setStories(stories);

        // Save or update user stories
        ofy().save().entity(userStory); // Async Task

        if (inform) {
            // Create Queue to inform Friends and Followers
            Queue storyQueue = QueueFactory.getQueue("create-story");
            storyQueue.add(TaskOptions.Builder.withUrl("/queue/creating_story")
                    .param("userId", String.valueOf(userId))
                    .param("storyId", String.valueOf(storyId))
                    .param("isPublic", String.valueOf(mode))
            );
        }

        return userStory;
    }

    /**
     * Create comment for story
     * @param userId        Which is created comment
     * @param storySafeKey  Story safe key on which comment is posted
     * @param storyComment  Comment object for story contain source, type and storyNum
     * @return              Return - Story Comment
     */
    public StoryComment postStoryComment(@Named("userId") Long userId, @Named("storySafeKey") String storySafeKey, StoryComment storyComment){

        // Convert storySafeKey into storyKey to Get story key without user parent from storySafeKey
        Key<Story> storyKey = Key.create(storySafeKey);

        // Create new instance of storyComment
        StoryComment commentInstance = new StoryComment(
                Datastore.autoGeneratedId(),
                Key.create(Story.class, storyKey.getId()),
                Ref.create(Key.create(User.class, userId)),
                storyComment.getType(),
                storyComment.getSource(),
                storyComment.getAnonymous(),
                storyComment.getTaggedUser(),
                storyComment.getStoryNum()
        );

        // Save comment instance
        ofy().save().entity(commentInstance).now();

        // Start Task Queue to perform comment function like send notification and tag users
        Queue commentQueue = QueueFactory.getQueue("create-story-comment");
        commentQueue.add(TaskOptions.Builder.withUrl("/queue/creating_story_comment")
                .param("userId", String.valueOf(userId))
                .param("commentSafeKey", commentInstance.getCommnetSafeKey())
                .param("storySafeKey", storySafeKey)
        );

        return commentInstance;
    }

    /**
     * Get Story comment
     * @param storyId   Id of the story which you want to get comment
     * @param storyNum  Number of the story
     * @param cursor    Cursor where to start next query, It can be null
     * @return          List of Formatted story comment in CommentResponse object, CommentResponse contain a comment list and cursor
     */
    @ApiMethod(path = "getStoryComments/{storyId}/{storyNum}")
    public CommentResponse getStoryComments(@Named("storyId") Long storyId, @Named("storyNum") int storyNum,
                                       @Nullable @Named("cursor") String cursor){

        // Create a new CommentResponse object
        CommentResponse commentResponse = new CommentResponse();

        // Create StoryComment list
        List<StoryComment> storyCommentList = new ArrayList<>();

        // Get last 30 comments of this Post
        Query<StoryComment> storyCommentQuery = ofy().load().type(StoryComment.class)
                .ancestor(Key.create(Story.class, storyId))
                .filter("storyNum", storyNum)
                .limit(30);

        // If cursor is set then start query from cursor
        if (cursor != null)
            storyCommentQuery = storyCommentQuery.startAt(Cursor.fromWebSafeString(cursor));

        // Create variable to check there are more item or not
        boolean moreItem = false;

        // Create iterator to loop query
        QueryResultIterator<StoryComment> iterator = storyCommentQuery.iterator();

        // Loop query and convert into list
        while (iterator.hasNext()){
            storyCommentList.add(iterator.next());
            moreItem = true;
        }

        // If there is more items get the cursor
        if (moreItem)
            commentResponse.setCursor(iterator.getCursor().toWebSafeString());

        // Generate Formatted CommentResponse list
        if (storyCommentList.size() > 0)
            commentResponse.setCommentList(ApiHelper.generateStoryComment(storyCommentList));

        return commentResponse;
    }
}

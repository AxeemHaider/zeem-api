/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2018-05-04 17:28:03 UTC)
 * on 2018-09-27 at 12:43:59 UTC 
 * Modify at your own risk.
 */

package com.appspot.octabyte_zeem.zeem;

/**
 * Service definition for Zeem (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ZeemRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Zeem extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.25.0 of the zeem library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://octabyte-zeem.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "zeem/v1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Zeem(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Zeem(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Account collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Zeem zeem = new Zeem(...);}
   *   {@code Zeem.Account.List request = zeem.account().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Account account() {
    return new Account();
  }

  /**
   * The "account" collection of methods.
   */
  public class Account {

    /**
     * Create a request for the method "account.checkRegistration".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link CheckRegistration#execute()} method to invoke the remote operation.
     *
     * @param phone
     * @return the request
     */
    public CheckRegistration checkRegistration(java.lang.Long phone) throws java.io.IOException {
      CheckRegistration result = new CheckRegistration(phone);
      initialize(result);
      return result;
    }

    public class CheckRegistration extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.Registered> {

      private static final String REST_PATH = "checkRegistration/{phone}";

      /**
       * Create a request for the method "account.checkRegistration".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link CheckRegistration#execute()} method to invoke the remote operation.
       * <p> {@link CheckRegistration#initialize(com.google.api.client.googleapis.services.AbstractGoogl
       * eClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param phone
       * @since 1.13
       */
      protected CheckRegistration(java.lang.Long phone) {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.Registered.class);
        this.phone = com.google.api.client.util.Preconditions.checkNotNull(phone, "Required parameter phone must be specified.");
      }

      @Override
      public CheckRegistration setAlt(java.lang.String alt) {
        return (CheckRegistration) super.setAlt(alt);
      }

      @Override
      public CheckRegistration setFields(java.lang.String fields) {
        return (CheckRegistration) super.setFields(fields);
      }

      @Override
      public CheckRegistration setKey(java.lang.String key) {
        return (CheckRegistration) super.setKey(key);
      }

      @Override
      public CheckRegistration setOauthToken(java.lang.String oauthToken) {
        return (CheckRegistration) super.setOauthToken(oauthToken);
      }

      @Override
      public CheckRegistration setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (CheckRegistration) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public CheckRegistration setQuotaUser(java.lang.String quotaUser) {
        return (CheckRegistration) super.setQuotaUser(quotaUser);
      }

      @Override
      public CheckRegistration setUserIp(java.lang.String userIp) {
        return (CheckRegistration) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long phone;

      /**

       */
      public java.lang.Long getPhone() {
        return phone;
      }

      public CheckRegistration setPhone(java.lang.Long phone) {
        this.phone = phone;
        return this;
      }

      @Override
      public CheckRegistration set(String parameterName, Object value) {
        return (CheckRegistration) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "account.checkUsername".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link CheckUsername#execute()} method to invoke the remote operation.
     *
     * @param username
     * @param fullName
     * @return the request
     */
    public CheckUsername checkUsername(java.lang.String username, java.lang.String fullName) throws java.io.IOException {
      CheckUsername result = new CheckUsername(username, fullName);
      initialize(result);
      return result;
    }

    public class CheckUsername extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.Username> {

      private static final String REST_PATH = "checkUsername/{username}/{fullName}";

      /**
       * Create a request for the method "account.checkUsername".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link CheckUsername#execute()} method to invoke the remote operation. <p>
       * {@link CheckUsername#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param username
       * @param fullName
       * @since 1.13
       */
      protected CheckUsername(java.lang.String username, java.lang.String fullName) {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.Username.class);
        this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
        this.fullName = com.google.api.client.util.Preconditions.checkNotNull(fullName, "Required parameter fullName must be specified.");
      }

      @Override
      public CheckUsername setAlt(java.lang.String alt) {
        return (CheckUsername) super.setAlt(alt);
      }

      @Override
      public CheckUsername setFields(java.lang.String fields) {
        return (CheckUsername) super.setFields(fields);
      }

      @Override
      public CheckUsername setKey(java.lang.String key) {
        return (CheckUsername) super.setKey(key);
      }

      @Override
      public CheckUsername setOauthToken(java.lang.String oauthToken) {
        return (CheckUsername) super.setOauthToken(oauthToken);
      }

      @Override
      public CheckUsername setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (CheckUsername) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public CheckUsername setQuotaUser(java.lang.String quotaUser) {
        return (CheckUsername) super.setQuotaUser(quotaUser);
      }

      @Override
      public CheckUsername setUserIp(java.lang.String userIp) {
        return (CheckUsername) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String username;

      /**

       */
      public java.lang.String getUsername() {
        return username;
      }

      public CheckUsername setUsername(java.lang.String username) {
        this.username = username;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String fullName;

      /**

       */
      public java.lang.String getFullName() {
        return fullName;
      }

      public CheckUsername setFullName(java.lang.String fullName) {
        this.fullName = fullName;
        return this;
      }

      @Override
      public CheckUsername set(String parameterName, Object value) {
        return (CheckUsername) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "account.getAppInfo".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetAppInfo#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public GetAppInfo getAppInfo() throws java.io.IOException {
      GetAppInfo result = new GetAppInfo();
      initialize(result);
      return result;
    }

    public class GetAppInfo extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.AppInfo> {

      private static final String REST_PATH = "appinfo";

      /**
       * Create a request for the method "account.getAppInfo".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetAppInfo#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetAppInfo#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected GetAppInfo() {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.AppInfo.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetAppInfo setAlt(java.lang.String alt) {
        return (GetAppInfo) super.setAlt(alt);
      }

      @Override
      public GetAppInfo setFields(java.lang.String fields) {
        return (GetAppInfo) super.setFields(fields);
      }

      @Override
      public GetAppInfo setKey(java.lang.String key) {
        return (GetAppInfo) super.setKey(key);
      }

      @Override
      public GetAppInfo setOauthToken(java.lang.String oauthToken) {
        return (GetAppInfo) super.setOauthToken(oauthToken);
      }

      @Override
      public GetAppInfo setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetAppInfo) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetAppInfo setQuotaUser(java.lang.String quotaUser) {
        return (GetAppInfo) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetAppInfo setUserIp(java.lang.String userIp) {
        return (GetAppInfo) super.setUserIp(userIp);
      }

      @Override
      public GetAppInfo set(String parameterName, Object value) {
        return (GetAppInfo) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "account.registerUser".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link RegisterUser#execute()} method to invoke the remote operation.
     *
     * @param lat
     * @param lng
     * @param content the {@link com.appspot.octabyte_zeem.zeem.model.UserInfoHolder}
     * @return the request
     */
    public RegisterUser registerUser(java.lang.Double lat, java.lang.Double lng, com.appspot.octabyte_zeem.zeem.model.UserInfoHolder content) throws java.io.IOException {
      RegisterUser result = new RegisterUser(lat, lng, content);
      initialize(result);
      return result;
    }

    public class RegisterUser extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.User> {

      private static final String REST_PATH = "registerUser/{lat}/{lng}";

      /**
       * Create a request for the method "account.registerUser".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link RegisterUser#execute()} method to invoke the remote operation. <p>
       * {@link
       * RegisterUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param lat
       * @param lng
       * @param content the {@link com.appspot.octabyte_zeem.zeem.model.UserInfoHolder}
       * @since 1.13
       */
      protected RegisterUser(java.lang.Double lat, java.lang.Double lng, com.appspot.octabyte_zeem.zeem.model.UserInfoHolder content) {
        super(Zeem.this, "POST", REST_PATH, content, com.appspot.octabyte_zeem.zeem.model.User.class);
        this.lat = com.google.api.client.util.Preconditions.checkNotNull(lat, "Required parameter lat must be specified.");
        this.lng = com.google.api.client.util.Preconditions.checkNotNull(lng, "Required parameter lng must be specified.");
      }

      @Override
      public RegisterUser setAlt(java.lang.String alt) {
        return (RegisterUser) super.setAlt(alt);
      }

      @Override
      public RegisterUser setFields(java.lang.String fields) {
        return (RegisterUser) super.setFields(fields);
      }

      @Override
      public RegisterUser setKey(java.lang.String key) {
        return (RegisterUser) super.setKey(key);
      }

      @Override
      public RegisterUser setOauthToken(java.lang.String oauthToken) {
        return (RegisterUser) super.setOauthToken(oauthToken);
      }

      @Override
      public RegisterUser setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RegisterUser) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RegisterUser setQuotaUser(java.lang.String quotaUser) {
        return (RegisterUser) super.setQuotaUser(quotaUser);
      }

      @Override
      public RegisterUser setUserIp(java.lang.String userIp) {
        return (RegisterUser) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Double lat;

      /**

       */
      public java.lang.Double getLat() {
        return lat;
      }

      public RegisterUser setLat(java.lang.Double lat) {
        this.lat = lat;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Double lng;

      /**

       */
      public java.lang.Double getLng() {
        return lng;
      }

      public RegisterUser setLng(java.lang.Double lng) {
        this.lng = lng;
        return this;
      }

      @Override
      public RegisterUser set(String parameterName, Object value) {
        return (RegisterUser) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "account.setAppInfo".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link SetAppInfo#execute()} method to invoke the remote operation.
     *
     * @param versionCode
     * @param versionNumber
     * @return the request
     */
    public SetAppInfo setAppInfo(java.lang.Integer versionCode, java.lang.String versionNumber) throws java.io.IOException {
      SetAppInfo result = new SetAppInfo(versionCode, versionNumber);
      initialize(result);
      return result;
    }

    public class SetAppInfo extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.AppInfo> {

      private static final String REST_PATH = "setAppInfo/{versionCode}/{versionNumber}";

      /**
       * Create a request for the method "account.setAppInfo".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link SetAppInfo#execute()} method to invoke the remote operation. <p>
       * {@link
       * SetAppInfo#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param versionCode
       * @param versionNumber
       * @since 1.13
       */
      protected SetAppInfo(java.lang.Integer versionCode, java.lang.String versionNumber) {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.AppInfo.class);
        this.versionCode = com.google.api.client.util.Preconditions.checkNotNull(versionCode, "Required parameter versionCode must be specified.");
        this.versionNumber = com.google.api.client.util.Preconditions.checkNotNull(versionNumber, "Required parameter versionNumber must be specified.");
      }

      @Override
      public SetAppInfo setAlt(java.lang.String alt) {
        return (SetAppInfo) super.setAlt(alt);
      }

      @Override
      public SetAppInfo setFields(java.lang.String fields) {
        return (SetAppInfo) super.setFields(fields);
      }

      @Override
      public SetAppInfo setKey(java.lang.String key) {
        return (SetAppInfo) super.setKey(key);
      }

      @Override
      public SetAppInfo setOauthToken(java.lang.String oauthToken) {
        return (SetAppInfo) super.setOauthToken(oauthToken);
      }

      @Override
      public SetAppInfo setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SetAppInfo) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SetAppInfo setQuotaUser(java.lang.String quotaUser) {
        return (SetAppInfo) super.setQuotaUser(quotaUser);
      }

      @Override
      public SetAppInfo setUserIp(java.lang.String userIp) {
        return (SetAppInfo) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Integer versionCode;

      /**

       */
      public java.lang.Integer getVersionCode() {
        return versionCode;
      }

      public SetAppInfo setVersionCode(java.lang.Integer versionCode) {
        this.versionCode = versionCode;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String versionNumber;

      /**

       */
      public java.lang.String getVersionNumber() {
        return versionNumber;
      }

      public SetAppInfo setVersionNumber(java.lang.String versionNumber) {
        this.versionNumber = versionNumber;
        return this;
      }

      @Override
      public SetAppInfo set(String parameterName, Object value) {
        return (SetAppInfo) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the CommentApi collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Zeem zeem = new Zeem(...);}
   *   {@code Zeem.CommentApi.List request = zeem.commentApi().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public CommentApi commentApi() {
    return new CommentApi();
  }

  /**
   * The "commentApi" collection of methods.
   */
  public class CommentApi {

    /**
     * Create a request for the method "commentApi.commentStar".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link CommentStar#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param commentSafeKey
     * @param postMode
     * @return the request
     */
    public CommentStar commentStar(java.lang.Long userId, java.lang.String commentSafeKey, java.lang.String postMode) throws java.io.IOException {
      CommentStar result = new CommentStar(userId, commentSafeKey, postMode);
      initialize(result);
      return result;
    }

    public class CommentStar extends ZeemRequest<Void> {

      private static final String REST_PATH = "commentStar/{userId}/{commentSafeKey}/{postMode}";

      /**
       * Create a request for the method "commentApi.commentStar".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link CommentStar#execute()} method to invoke the remote operation. <p>
       * {@link
       * CommentStar#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param commentSafeKey
       * @param postMode
       * @since 1.13
       */
      protected CommentStar(java.lang.Long userId, java.lang.String commentSafeKey, java.lang.String postMode) {
        super(Zeem.this, "POST", REST_PATH, null, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.commentSafeKey = com.google.api.client.util.Preconditions.checkNotNull(commentSafeKey, "Required parameter commentSafeKey must be specified.");
        this.postMode = com.google.api.client.util.Preconditions.checkNotNull(postMode, "Required parameter postMode must be specified.");
      }

      @Override
      public CommentStar setAlt(java.lang.String alt) {
        return (CommentStar) super.setAlt(alt);
      }

      @Override
      public CommentStar setFields(java.lang.String fields) {
        return (CommentStar) super.setFields(fields);
      }

      @Override
      public CommentStar setKey(java.lang.String key) {
        return (CommentStar) super.setKey(key);
      }

      @Override
      public CommentStar setOauthToken(java.lang.String oauthToken) {
        return (CommentStar) super.setOauthToken(oauthToken);
      }

      @Override
      public CommentStar setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (CommentStar) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public CommentStar setQuotaUser(java.lang.String quotaUser) {
        return (CommentStar) super.setQuotaUser(quotaUser);
      }

      @Override
      public CommentStar setUserIp(java.lang.String userIp) {
        return (CommentStar) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public CommentStar setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String commentSafeKey;

      /**

       */
      public java.lang.String getCommentSafeKey() {
        return commentSafeKey;
      }

      public CommentStar setCommentSafeKey(java.lang.String commentSafeKey) {
        this.commentSafeKey = commentSafeKey;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String postMode;

      /**

       */
      public java.lang.String getPostMode() {
        return postMode;
      }

      public CommentStar setPostMode(java.lang.String postMode) {
        this.postMode = postMode;
        return this;
      }

      @Override
      public CommentStar set(String parameterName, Object value) {
        return (CommentStar) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "commentApi.deleteComment".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link DeleteComment#execute()} method to invoke the remote operation.
     *
     * @param commentSafeKey
     * @return the request
     */
    public DeleteComment deleteComment(java.lang.String commentSafeKey) throws java.io.IOException {
      DeleteComment result = new DeleteComment(commentSafeKey);
      initialize(result);
      return result;
    }

    public class DeleteComment extends ZeemRequest<Void> {

      private static final String REST_PATH = "comment/{commentSafeKey}";

      /**
       * Create a request for the method "commentApi.deleteComment".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link DeleteComment#execute()} method to invoke the remote operation. <p>
       * {@link DeleteComment#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param commentSafeKey
       * @since 1.13
       */
      protected DeleteComment(java.lang.String commentSafeKey) {
        super(Zeem.this, "DELETE", REST_PATH, null, Void.class);
        this.commentSafeKey = com.google.api.client.util.Preconditions.checkNotNull(commentSafeKey, "Required parameter commentSafeKey must be specified.");
      }

      @Override
      public DeleteComment setAlt(java.lang.String alt) {
        return (DeleteComment) super.setAlt(alt);
      }

      @Override
      public DeleteComment setFields(java.lang.String fields) {
        return (DeleteComment) super.setFields(fields);
      }

      @Override
      public DeleteComment setKey(java.lang.String key) {
        return (DeleteComment) super.setKey(key);
      }

      @Override
      public DeleteComment setOauthToken(java.lang.String oauthToken) {
        return (DeleteComment) super.setOauthToken(oauthToken);
      }

      @Override
      public DeleteComment setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (DeleteComment) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public DeleteComment setQuotaUser(java.lang.String quotaUser) {
        return (DeleteComment) super.setQuotaUser(quotaUser);
      }

      @Override
      public DeleteComment setUserIp(java.lang.String userIp) {
        return (DeleteComment) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String commentSafeKey;

      /**

       */
      public java.lang.String getCommentSafeKey() {
        return commentSafeKey;
      }

      public DeleteComment setCommentSafeKey(java.lang.String commentSafeKey) {
        this.commentSafeKey = commentSafeKey;
        return this;
      }

      @Override
      public DeleteComment set(String parameterName, Object value) {
        return (DeleteComment) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "commentApi.getComments".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetComments#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param postId
     * @return the request
     */
    public GetComments getComments(java.lang.Long userId, java.lang.Long postId) throws java.io.IOException {
      GetComments result = new GetComments(userId, postId);
      initialize(result);
      return result;
    }

    public class GetComments extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.CommentResponse> {

      private static final String REST_PATH = "commentresponse/{userId}/{postId}";

      /**
       * Create a request for the method "commentApi.getComments".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetComments#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetComments#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param postId
       * @since 1.13
       */
      protected GetComments(java.lang.Long userId, java.lang.Long postId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.CommentResponse.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetComments setAlt(java.lang.String alt) {
        return (GetComments) super.setAlt(alt);
      }

      @Override
      public GetComments setFields(java.lang.String fields) {
        return (GetComments) super.setFields(fields);
      }

      @Override
      public GetComments setKey(java.lang.String key) {
        return (GetComments) super.setKey(key);
      }

      @Override
      public GetComments setOauthToken(java.lang.String oauthToken) {
        return (GetComments) super.setOauthToken(oauthToken);
      }

      @Override
      public GetComments setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetComments) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetComments setQuotaUser(java.lang.String quotaUser) {
        return (GetComments) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetComments setUserIp(java.lang.String userIp) {
        return (GetComments) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetComments setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long postId;

      /**

       */
      public java.lang.Long getPostId() {
        return postId;
      }

      public GetComments setPostId(java.lang.Long postId) {
        this.postId = postId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public GetComments setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @Override
      public GetComments set(String parameterName, Object value) {
        return (GetComments) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "commentApi.postComment".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link PostComment#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param postSafeKey
     * @param content the {@link com.appspot.octabyte_zeem.zeem.model.Comment}
     * @return the request
     */
    public PostComment postComment(java.lang.Long userId, java.lang.String postSafeKey, com.appspot.octabyte_zeem.zeem.model.Comment content) throws java.io.IOException {
      PostComment result = new PostComment(userId, postSafeKey, content);
      initialize(result);
      return result;
    }

    public class PostComment extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.Comment> {

      private static final String REST_PATH = "postComment/{userId}/{postSafeKey}";

      /**
       * Create a request for the method "commentApi.postComment".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link PostComment#execute()} method to invoke the remote operation. <p>
       * {@link
       * PostComment#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param postSafeKey
       * @param content the {@link com.appspot.octabyte_zeem.zeem.model.Comment}
       * @since 1.13
       */
      protected PostComment(java.lang.Long userId, java.lang.String postSafeKey, com.appspot.octabyte_zeem.zeem.model.Comment content) {
        super(Zeem.this, "POST", REST_PATH, content, com.appspot.octabyte_zeem.zeem.model.Comment.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.postSafeKey = com.google.api.client.util.Preconditions.checkNotNull(postSafeKey, "Required parameter postSafeKey must be specified.");
      }

      @Override
      public PostComment setAlt(java.lang.String alt) {
        return (PostComment) super.setAlt(alt);
      }

      @Override
      public PostComment setFields(java.lang.String fields) {
        return (PostComment) super.setFields(fields);
      }

      @Override
      public PostComment setKey(java.lang.String key) {
        return (PostComment) super.setKey(key);
      }

      @Override
      public PostComment setOauthToken(java.lang.String oauthToken) {
        return (PostComment) super.setOauthToken(oauthToken);
      }

      @Override
      public PostComment setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (PostComment) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public PostComment setQuotaUser(java.lang.String quotaUser) {
        return (PostComment) super.setQuotaUser(quotaUser);
      }

      @Override
      public PostComment setUserIp(java.lang.String userIp) {
        return (PostComment) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public PostComment setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String postSafeKey;

      /**

       */
      public java.lang.String getPostSafeKey() {
        return postSafeKey;
      }

      public PostComment setPostSafeKey(java.lang.String postSafeKey) {
        this.postSafeKey = postSafeKey;
        return this;
      }

      @Override
      public PostComment set(String parameterName, Object value) {
        return (PostComment) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the FriendApi collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Zeem zeem = new Zeem(...);}
   *   {@code Zeem.FriendApi.List request = zeem.friendApi().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public FriendApi friendApi() {
    return new FriendApi();
  }

  /**
   * The "friendApi" collection of methods.
   */
  public class FriendApi {

    /**
     * Create a request for the method "friendApi.acceptFriendRequest".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link AcceptFriendRequest#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param requestId
     * @param friendId
     * @return the request
     */
    public AcceptFriendRequest acceptFriendRequest(java.lang.Long userId, java.lang.Long requestId, java.lang.Long friendId) throws java.io.IOException {
      AcceptFriendRequest result = new AcceptFriendRequest(userId, requestId, friendId);
      initialize(result);
      return result;
    }

    public class AcceptFriendRequest extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.TaskComplete> {

      private static final String REST_PATH = "acceptFriendRequest/{userId}/{requestId}/{friendId}";

      /**
       * Create a request for the method "friendApi.acceptFriendRequest".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link AcceptFriendRequest#execute()} method to invoke the remote
       * operation. <p> {@link AcceptFriendRequest#initialize(com.google.api.client.googleapis.services.
       * AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param userId
       * @param requestId
       * @param friendId
       * @since 1.13
       */
      protected AcceptFriendRequest(java.lang.Long userId, java.lang.Long requestId, java.lang.Long friendId) {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.TaskComplete.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.requestId = com.google.api.client.util.Preconditions.checkNotNull(requestId, "Required parameter requestId must be specified.");
        this.friendId = com.google.api.client.util.Preconditions.checkNotNull(friendId, "Required parameter friendId must be specified.");
      }

      @Override
      public AcceptFriendRequest setAlt(java.lang.String alt) {
        return (AcceptFriendRequest) super.setAlt(alt);
      }

      @Override
      public AcceptFriendRequest setFields(java.lang.String fields) {
        return (AcceptFriendRequest) super.setFields(fields);
      }

      @Override
      public AcceptFriendRequest setKey(java.lang.String key) {
        return (AcceptFriendRequest) super.setKey(key);
      }

      @Override
      public AcceptFriendRequest setOauthToken(java.lang.String oauthToken) {
        return (AcceptFriendRequest) super.setOauthToken(oauthToken);
      }

      @Override
      public AcceptFriendRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AcceptFriendRequest) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AcceptFriendRequest setQuotaUser(java.lang.String quotaUser) {
        return (AcceptFriendRequest) super.setQuotaUser(quotaUser);
      }

      @Override
      public AcceptFriendRequest setUserIp(java.lang.String userIp) {
        return (AcceptFriendRequest) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public AcceptFriendRequest setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long requestId;

      /**

       */
      public java.lang.Long getRequestId() {
        return requestId;
      }

      public AcceptFriendRequest setRequestId(java.lang.Long requestId) {
        this.requestId = requestId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long friendId;

      /**

       */
      public java.lang.Long getFriendId() {
        return friendId;
      }

      public AcceptFriendRequest setFriendId(java.lang.Long friendId) {
        this.friendId = friendId;
        return this;
      }

      @Override
      public AcceptFriendRequest set(String parameterName, Object value) {
        return (AcceptFriendRequest) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "friendApi.addFriend".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link AddFriend#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param userPhone
     * @param friendPhone
     * @return the request
     */
    public AddFriend addFriend(java.lang.Long userId, java.lang.Long userPhone, java.lang.Long friendPhone) throws java.io.IOException {
      AddFriend result = new AddFriend(userId, userPhone, friendPhone);
      initialize(result);
      return result;
    }

    public class AddFriend extends ZeemRequest<Void> {

      private static final String REST_PATH = "addFriend/{userId}/{userPhone}/{friendPhone}";

      /**
       * Create a request for the method "friendApi.addFriend".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link AddFriend#execute()} method to invoke the remote operation. <p>
       * {@link
       * AddFriend#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param userPhone
       * @param friendPhone
       * @since 1.13
       */
      protected AddFriend(java.lang.Long userId, java.lang.Long userPhone, java.lang.Long friendPhone) {
        super(Zeem.this, "POST", REST_PATH, null, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.userPhone = com.google.api.client.util.Preconditions.checkNotNull(userPhone, "Required parameter userPhone must be specified.");
        this.friendPhone = com.google.api.client.util.Preconditions.checkNotNull(friendPhone, "Required parameter friendPhone must be specified.");
      }

      @Override
      public AddFriend setAlt(java.lang.String alt) {
        return (AddFriend) super.setAlt(alt);
      }

      @Override
      public AddFriend setFields(java.lang.String fields) {
        return (AddFriend) super.setFields(fields);
      }

      @Override
      public AddFriend setKey(java.lang.String key) {
        return (AddFriend) super.setKey(key);
      }

      @Override
      public AddFriend setOauthToken(java.lang.String oauthToken) {
        return (AddFriend) super.setOauthToken(oauthToken);
      }

      @Override
      public AddFriend setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (AddFriend) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public AddFriend setQuotaUser(java.lang.String quotaUser) {
        return (AddFriend) super.setQuotaUser(quotaUser);
      }

      @Override
      public AddFriend setUserIp(java.lang.String userIp) {
        return (AddFriend) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public AddFriend setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long userPhone;

      /**

       */
      public java.lang.Long getUserPhone() {
        return userPhone;
      }

      public AddFriend setUserPhone(java.lang.Long userPhone) {
        this.userPhone = userPhone;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long friendPhone;

      /**

       */
      public java.lang.Long getFriendPhone() {
        return friendPhone;
      }

      public AddFriend setFriendPhone(java.lang.Long friendPhone) {
        this.friendPhone = friendPhone;
        return this;
      }

      @Override
      public AddFriend set(String parameterName, Object value) {
        return (AddFriend) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "friendApi.blockFriend".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link BlockFriend#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param friendId
     * @return the request
     */
    public BlockFriend blockFriend(java.lang.Long userId, java.lang.Long friendId) throws java.io.IOException {
      BlockFriend result = new BlockFriend(userId, friendId);
      initialize(result);
      return result;
    }

    public class BlockFriend extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.TaskComplete> {

      private static final String REST_PATH = "blockFriend/{userId}/{friendId}";

      /**
       * Create a request for the method "friendApi.blockFriend".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link BlockFriend#execute()} method to invoke the remote operation. <p>
       * {@link
       * BlockFriend#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param friendId
       * @since 1.13
       */
      protected BlockFriend(java.lang.Long userId, java.lang.Long friendId) {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.TaskComplete.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.friendId = com.google.api.client.util.Preconditions.checkNotNull(friendId, "Required parameter friendId must be specified.");
      }

      @Override
      public BlockFriend setAlt(java.lang.String alt) {
        return (BlockFriend) super.setAlt(alt);
      }

      @Override
      public BlockFriend setFields(java.lang.String fields) {
        return (BlockFriend) super.setFields(fields);
      }

      @Override
      public BlockFriend setKey(java.lang.String key) {
        return (BlockFriend) super.setKey(key);
      }

      @Override
      public BlockFriend setOauthToken(java.lang.String oauthToken) {
        return (BlockFriend) super.setOauthToken(oauthToken);
      }

      @Override
      public BlockFriend setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (BlockFriend) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public BlockFriend setQuotaUser(java.lang.String quotaUser) {
        return (BlockFriend) super.setQuotaUser(quotaUser);
      }

      @Override
      public BlockFriend setUserIp(java.lang.String userIp) {
        return (BlockFriend) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public BlockFriend setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long friendId;

      /**

       */
      public java.lang.Long getFriendId() {
        return friendId;
      }

      public BlockFriend setFriendId(java.lang.Long friendId) {
        this.friendId = friendId;
        return this;
      }

      @Override
      public BlockFriend set(String parameterName, Object value) {
        return (BlockFriend) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "friendApi.follow".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link Follow#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param followingId
     * @return the request
     */
    public Follow follow(java.lang.Long userId, java.lang.Long followingId) throws java.io.IOException {
      Follow result = new Follow(userId, followingId);
      initialize(result);
      return result;
    }

    public class Follow extends ZeemRequest<Void> {

      private static final String REST_PATH = "follow/{userId}/{followingId}";

      /**
       * Create a request for the method "friendApi.follow".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link Follow#execute()} method to invoke the remote operation. <p> {@link
       * Follow#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param followingId
       * @since 1.13
       */
      protected Follow(java.lang.Long userId, java.lang.Long followingId) {
        super(Zeem.this, "POST", REST_PATH, null, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.followingId = com.google.api.client.util.Preconditions.checkNotNull(followingId, "Required parameter followingId must be specified.");
      }

      @Override
      public Follow setAlt(java.lang.String alt) {
        return (Follow) super.setAlt(alt);
      }

      @Override
      public Follow setFields(java.lang.String fields) {
        return (Follow) super.setFields(fields);
      }

      @Override
      public Follow setKey(java.lang.String key) {
        return (Follow) super.setKey(key);
      }

      @Override
      public Follow setOauthToken(java.lang.String oauthToken) {
        return (Follow) super.setOauthToken(oauthToken);
      }

      @Override
      public Follow setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Follow) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Follow setQuotaUser(java.lang.String quotaUser) {
        return (Follow) super.setQuotaUser(quotaUser);
      }

      @Override
      public Follow setUserIp(java.lang.String userIp) {
        return (Follow) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public Follow setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long followingId;

      /**

       */
      public java.lang.Long getFollowingId() {
        return followingId;
      }

      public Follow setFollowingId(java.lang.Long followingId) {
        this.followingId = followingId;
        return this;
      }

      @Override
      public Follow set(String parameterName, Object value) {
        return (Follow) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "friendApi.unBlockFriend".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link UnBlockFriend#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param friendId
     * @return the request
     */
    public UnBlockFriend unBlockFriend(java.lang.Long userId, java.lang.Long friendId) throws java.io.IOException {
      UnBlockFriend result = new UnBlockFriend(userId, friendId);
      initialize(result);
      return result;
    }

    public class UnBlockFriend extends ZeemRequest<Void> {

      private static final String REST_PATH = "unBlockFriend/{userId}/{friendId}";

      /**
       * Create a request for the method "friendApi.unBlockFriend".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link UnBlockFriend#execute()} method to invoke the remote operation. <p>
       * {@link UnBlockFriend#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param userId
       * @param friendId
       * @since 1.13
       */
      protected UnBlockFriend(java.lang.Long userId, java.lang.Long friendId) {
        super(Zeem.this, "POST", REST_PATH, null, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.friendId = com.google.api.client.util.Preconditions.checkNotNull(friendId, "Required parameter friendId must be specified.");
      }

      @Override
      public UnBlockFriend setAlt(java.lang.String alt) {
        return (UnBlockFriend) super.setAlt(alt);
      }

      @Override
      public UnBlockFriend setFields(java.lang.String fields) {
        return (UnBlockFriend) super.setFields(fields);
      }

      @Override
      public UnBlockFriend setKey(java.lang.String key) {
        return (UnBlockFriend) super.setKey(key);
      }

      @Override
      public UnBlockFriend setOauthToken(java.lang.String oauthToken) {
        return (UnBlockFriend) super.setOauthToken(oauthToken);
      }

      @Override
      public UnBlockFriend setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UnBlockFriend) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UnBlockFriend setQuotaUser(java.lang.String quotaUser) {
        return (UnBlockFriend) super.setQuotaUser(quotaUser);
      }

      @Override
      public UnBlockFriend setUserIp(java.lang.String userIp) {
        return (UnBlockFriend) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public UnBlockFriend setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long friendId;

      /**

       */
      public java.lang.Long getFriendId() {
        return friendId;
      }

      public UnBlockFriend setFriendId(java.lang.Long friendId) {
        this.friendId = friendId;
        return this;
      }

      @Override
      public UnBlockFriend set(String parameterName, Object value) {
        return (UnBlockFriend) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "friendApi.unFollow".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link UnFollow#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param followId
     * @return the request
     */
    public UnFollow unFollow(java.lang.Long userId, java.lang.Long followId) throws java.io.IOException {
      UnFollow result = new UnFollow(userId, followId);
      initialize(result);
      return result;
    }

    public class UnFollow extends ZeemRequest<Void> {

      private static final String REST_PATH = "unFollow/{userId}/{followId}";

      /**
       * Create a request for the method "friendApi.unFollow".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link UnFollow#execute()} method to invoke the remote operation. <p>
       * {@link
       * UnFollow#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param followId
       * @since 1.13
       */
      protected UnFollow(java.lang.Long userId, java.lang.Long followId) {
        super(Zeem.this, "POST", REST_PATH, null, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.followId = com.google.api.client.util.Preconditions.checkNotNull(followId, "Required parameter followId must be specified.");
      }

      @Override
      public UnFollow setAlt(java.lang.String alt) {
        return (UnFollow) super.setAlt(alt);
      }

      @Override
      public UnFollow setFields(java.lang.String fields) {
        return (UnFollow) super.setFields(fields);
      }

      @Override
      public UnFollow setKey(java.lang.String key) {
        return (UnFollow) super.setKey(key);
      }

      @Override
      public UnFollow setOauthToken(java.lang.String oauthToken) {
        return (UnFollow) super.setOauthToken(oauthToken);
      }

      @Override
      public UnFollow setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UnFollow) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UnFollow setQuotaUser(java.lang.String quotaUser) {
        return (UnFollow) super.setQuotaUser(quotaUser);
      }

      @Override
      public UnFollow setUserIp(java.lang.String userIp) {
        return (UnFollow) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public UnFollow setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long followId;

      /**

       */
      public java.lang.Long getFollowId() {
        return followId;
      }

      public UnFollow setFollowId(java.lang.Long followId) {
        this.followId = followId;
        return this;
      }

      @Override
      public UnFollow set(String parameterName, Object value) {
        return (UnFollow) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the ListApi collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Zeem zeem = new Zeem(...);}
   *   {@code Zeem.ListApi.List request = zeem.listApi().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public ListApi listApi() {
    return new ListApi();
  }

  /**
   * The "listApi" collection of methods.
   */
  public class ListApi {

    /**
     * Create a request for the method "listApi.createList".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link CreateList#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param content the {@link com.appspot.octabyte_zeem.zeem.model.UserList}
     * @return the request
     */
    public CreateList createList(java.lang.Long userId, com.appspot.octabyte_zeem.zeem.model.UserList content) throws java.io.IOException {
      CreateList result = new CreateList(userId, content);
      initialize(result);
      return result;
    }

    public class CreateList extends ZeemRequest<Void> {

      private static final String REST_PATH = "createList/{userId}";

      /**
       * Create a request for the method "listApi.createList".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link CreateList#execute()} method to invoke the remote operation. <p>
       * {@link
       * CreateList#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param content the {@link com.appspot.octabyte_zeem.zeem.model.UserList}
       * @since 1.13
       */
      protected CreateList(java.lang.Long userId, com.appspot.octabyte_zeem.zeem.model.UserList content) {
        super(Zeem.this, "POST", REST_PATH, content, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public CreateList setAlt(java.lang.String alt) {
        return (CreateList) super.setAlt(alt);
      }

      @Override
      public CreateList setFields(java.lang.String fields) {
        return (CreateList) super.setFields(fields);
      }

      @Override
      public CreateList setKey(java.lang.String key) {
        return (CreateList) super.setKey(key);
      }

      @Override
      public CreateList setOauthToken(java.lang.String oauthToken) {
        return (CreateList) super.setOauthToken(oauthToken);
      }

      @Override
      public CreateList setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (CreateList) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public CreateList setQuotaUser(java.lang.String quotaUser) {
        return (CreateList) super.setQuotaUser(quotaUser);
      }

      @Override
      public CreateList setUserIp(java.lang.String userIp) {
        return (CreateList) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public CreateList setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.util.List<java.lang.Long> memberIds;

      /**

       */
      public java.util.List<java.lang.Long> getMemberIds() {
        return memberIds;
      }

      public CreateList setMemberIds(java.util.List<java.lang.Long> memberIds) {
        this.memberIds = memberIds;
        return this;
      }

      @Override
      public CreateList set(String parameterName, Object value) {
        return (CreateList) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "listApi.getListMembers".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetListMembers#execute()} method to invoke the remote operation.
     *
     * @param listId
     * @return the request
     */
    public GetListMembers getListMembers(java.lang.Long listId) throws java.io.IOException {
      GetListMembers result = new GetListMembers(listId);
      initialize(result);
      return result;
    }

    public class GetListMembers extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.UserCollection> {

      private static final String REST_PATH = "getListMembers/{listId}";

      /**
       * Create a request for the method "listApi.getListMembers".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetListMembers#execute()} method to invoke the remote operation.
       * <p> {@link GetListMembers#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param listId
       * @since 1.13
       */
      protected GetListMembers(java.lang.Long listId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.UserCollection.class);
        this.listId = com.google.api.client.util.Preconditions.checkNotNull(listId, "Required parameter listId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetListMembers setAlt(java.lang.String alt) {
        return (GetListMembers) super.setAlt(alt);
      }

      @Override
      public GetListMembers setFields(java.lang.String fields) {
        return (GetListMembers) super.setFields(fields);
      }

      @Override
      public GetListMembers setKey(java.lang.String key) {
        return (GetListMembers) super.setKey(key);
      }

      @Override
      public GetListMembers setOauthToken(java.lang.String oauthToken) {
        return (GetListMembers) super.setOauthToken(oauthToken);
      }

      @Override
      public GetListMembers setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetListMembers) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetListMembers setQuotaUser(java.lang.String quotaUser) {
        return (GetListMembers) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetListMembers setUserIp(java.lang.String userIp) {
        return (GetListMembers) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long listId;

      /**

       */
      public java.lang.Long getListId() {
        return listId;
      }

      public GetListMembers setListId(java.lang.Long listId) {
        this.listId = listId;
        return this;
      }

      @Override
      public GetListMembers set(String parameterName, Object value) {
        return (GetListMembers) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "listApi.getUserList".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetUserList#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @return the request
     */
    public GetUserList getUserList(java.lang.Long userId) throws java.io.IOException {
      GetUserList result = new GetUserList(userId);
      initialize(result);
      return result;
    }

    public class GetUserList extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.UserListCollection> {

      private static final String REST_PATH = "userlistcollection/{userId}";

      /**
       * Create a request for the method "listApi.getUserList".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetUserList#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetUserList#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @since 1.13
       */
      protected GetUserList(java.lang.Long userId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.UserListCollection.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetUserList setAlt(java.lang.String alt) {
        return (GetUserList) super.setAlt(alt);
      }

      @Override
      public GetUserList setFields(java.lang.String fields) {
        return (GetUserList) super.setFields(fields);
      }

      @Override
      public GetUserList setKey(java.lang.String key) {
        return (GetUserList) super.setKey(key);
      }

      @Override
      public GetUserList setOauthToken(java.lang.String oauthToken) {
        return (GetUserList) super.setOauthToken(oauthToken);
      }

      @Override
      public GetUserList setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetUserList) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetUserList setQuotaUser(java.lang.String quotaUser) {
        return (GetUserList) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetUserList setUserIp(java.lang.String userIp) {
        return (GetUserList) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetUserList setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public GetUserList set(String parameterName, Object value) {
        return (GetUserList) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "listApi.removeList".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link RemoveList#execute()} method to invoke the remote operation.
     *
     * @param listSafeKey
     * @return the request
     */
    public RemoveList removeList(java.lang.String listSafeKey) throws java.io.IOException {
      RemoveList result = new RemoveList(listSafeKey);
      initialize(result);
      return result;
    }

    public class RemoveList extends ZeemRequest<Void> {

      private static final String REST_PATH = "list/{listSafeKey}";

      /**
       * Create a request for the method "listApi.removeList".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link RemoveList#execute()} method to invoke the remote operation. <p>
       * {@link
       * RemoveList#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param listSafeKey
       * @since 1.13
       */
      protected RemoveList(java.lang.String listSafeKey) {
        super(Zeem.this, "DELETE", REST_PATH, null, Void.class);
        this.listSafeKey = com.google.api.client.util.Preconditions.checkNotNull(listSafeKey, "Required parameter listSafeKey must be specified.");
      }

      @Override
      public RemoveList setAlt(java.lang.String alt) {
        return (RemoveList) super.setAlt(alt);
      }

      @Override
      public RemoveList setFields(java.lang.String fields) {
        return (RemoveList) super.setFields(fields);
      }

      @Override
      public RemoveList setKey(java.lang.String key) {
        return (RemoveList) super.setKey(key);
      }

      @Override
      public RemoveList setOauthToken(java.lang.String oauthToken) {
        return (RemoveList) super.setOauthToken(oauthToken);
      }

      @Override
      public RemoveList setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RemoveList) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RemoveList setQuotaUser(java.lang.String quotaUser) {
        return (RemoveList) super.setQuotaUser(quotaUser);
      }

      @Override
      public RemoveList setUserIp(java.lang.String userIp) {
        return (RemoveList) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String listSafeKey;

      /**

       */
      public java.lang.String getListSafeKey() {
        return listSafeKey;
      }

      public RemoveList setListSafeKey(java.lang.String listSafeKey) {
        this.listSafeKey = listSafeKey;
        return this;
      }

      @Override
      public RemoveList set(String parameterName, Object value) {
        return (RemoveList) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "listApi.removeListMember".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link RemoveListMember#execute()} method to invoke the remote operation.
     *
     * @param listId
     * @param userId
     * @return the request
     */
    public RemoveListMember removeListMember(java.lang.Long listId, java.lang.Long userId) throws java.io.IOException {
      RemoveListMember result = new RemoveListMember(listId, userId);
      initialize(result);
      return result;
    }

    public class RemoveListMember extends ZeemRequest<Void> {

      private static final String REST_PATH = "listmember/{listId}/{userId}";

      /**
       * Create a request for the method "listApi.removeListMember".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link RemoveListMember#execute()} method to invoke the remote operation.
       * <p> {@link RemoveListMember#initialize(com.google.api.client.googleapis.services.AbstractGoogle
       * ClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param listId
       * @param userId
       * @since 1.13
       */
      protected RemoveListMember(java.lang.Long listId, java.lang.Long userId) {
        super(Zeem.this, "DELETE", REST_PATH, null, Void.class);
        this.listId = com.google.api.client.util.Preconditions.checkNotNull(listId, "Required parameter listId must be specified.");
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public RemoveListMember setAlt(java.lang.String alt) {
        return (RemoveListMember) super.setAlt(alt);
      }

      @Override
      public RemoveListMember setFields(java.lang.String fields) {
        return (RemoveListMember) super.setFields(fields);
      }

      @Override
      public RemoveListMember setKey(java.lang.String key) {
        return (RemoveListMember) super.setKey(key);
      }

      @Override
      public RemoveListMember setOauthToken(java.lang.String oauthToken) {
        return (RemoveListMember) super.setOauthToken(oauthToken);
      }

      @Override
      public RemoveListMember setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RemoveListMember) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RemoveListMember setQuotaUser(java.lang.String quotaUser) {
        return (RemoveListMember) super.setQuotaUser(quotaUser);
      }

      @Override
      public RemoveListMember setUserIp(java.lang.String userIp) {
        return (RemoveListMember) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long listId;

      /**

       */
      public java.lang.Long getListId() {
        return listId;
      }

      public RemoveListMember setListId(java.lang.Long listId) {
        this.listId = listId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public RemoveListMember setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public RemoveListMember set(String parameterName, Object value) {
        return (RemoveListMember) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the PostApi collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Zeem zeem = new Zeem(...);}
   *   {@code Zeem.PostApi.List request = zeem.postApi().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public PostApi postApi() {
    return new PostApi();
  }

  /**
   * The "postApi" collection of methods.
   */
  public class PostApi {

    /**
     * Create a request for the method "postApi.createPost".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link CreatePost#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param content the {@link com.appspot.octabyte_zeem.zeem.model.Post}
     * @return the request
     */
    public CreatePost createPost(java.lang.Long userId, com.appspot.octabyte_zeem.zeem.model.Post content) throws java.io.IOException {
      CreatePost result = new CreatePost(userId, content);
      initialize(result);
      return result;
    }

    public class CreatePost extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.Post> {

      private static final String REST_PATH = "createPost/{userId}";

      /**
       * Create a request for the method "postApi.createPost".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link CreatePost#execute()} method to invoke the remote operation. <p>
       * {@link
       * CreatePost#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param content the {@link com.appspot.octabyte_zeem.zeem.model.Post}
       * @since 1.13
       */
      protected CreatePost(java.lang.Long userId, com.appspot.octabyte_zeem.zeem.model.Post content) {
        super(Zeem.this, "POST", REST_PATH, content, com.appspot.octabyte_zeem.zeem.model.Post.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public CreatePost setAlt(java.lang.String alt) {
        return (CreatePost) super.setAlt(alt);
      }

      @Override
      public CreatePost setFields(java.lang.String fields) {
        return (CreatePost) super.setFields(fields);
      }

      @Override
      public CreatePost setKey(java.lang.String key) {
        return (CreatePost) super.setKey(key);
      }

      @Override
      public CreatePost setOauthToken(java.lang.String oauthToken) {
        return (CreatePost) super.setOauthToken(oauthToken);
      }

      @Override
      public CreatePost setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (CreatePost) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public CreatePost setQuotaUser(java.lang.String quotaUser) {
        return (CreatePost) super.setQuotaUser(quotaUser);
      }

      @Override
      public CreatePost setUserIp(java.lang.String userIp) {
        return (CreatePost) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public CreatePost setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.util.List<java.lang.Long> tagUserId;

      /**

       */
      public java.util.List<java.lang.Long> getTagUserId() {
        return tagUserId;
      }

      public CreatePost setTagUserId(java.util.List<java.lang.Long> tagUserId) {
        this.tagUserId = tagUserId;
        return this;
      }

      @Override
      public CreatePost set(String parameterName, Object value) {
        return (CreatePost) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "postApi.deletePost".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link DeletePost#execute()} method to invoke the remote operation.
     *
     * @param postSafeKey
     * @return the request
     */
    public DeletePost deletePost(java.lang.String postSafeKey) throws java.io.IOException {
      DeletePost result = new DeletePost(postSafeKey);
      initialize(result);
      return result;
    }

    public class DeletePost extends ZeemRequest<Void> {

      private static final String REST_PATH = "post/{postSafeKey}";

      /**
       * Create a request for the method "postApi.deletePost".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link DeletePost#execute()} method to invoke the remote operation. <p>
       * {@link
       * DeletePost#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param postSafeKey
       * @since 1.13
       */
      protected DeletePost(java.lang.String postSafeKey) {
        super(Zeem.this, "DELETE", REST_PATH, null, Void.class);
        this.postSafeKey = com.google.api.client.util.Preconditions.checkNotNull(postSafeKey, "Required parameter postSafeKey must be specified.");
      }

      @Override
      public DeletePost setAlt(java.lang.String alt) {
        return (DeletePost) super.setAlt(alt);
      }

      @Override
      public DeletePost setFields(java.lang.String fields) {
        return (DeletePost) super.setFields(fields);
      }

      @Override
      public DeletePost setKey(java.lang.String key) {
        return (DeletePost) super.setKey(key);
      }

      @Override
      public DeletePost setOauthToken(java.lang.String oauthToken) {
        return (DeletePost) super.setOauthToken(oauthToken);
      }

      @Override
      public DeletePost setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (DeletePost) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public DeletePost setQuotaUser(java.lang.String quotaUser) {
        return (DeletePost) super.setQuotaUser(quotaUser);
      }

      @Override
      public DeletePost setUserIp(java.lang.String userIp) {
        return (DeletePost) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String postSafeKey;

      /**

       */
      public java.lang.String getPostSafeKey() {
        return postSafeKey;
      }

      public DeletePost setPostSafeKey(java.lang.String postSafeKey) {
        this.postSafeKey = postSafeKey;
        return this;
      }

      @Override
      public DeletePost set(String parameterName, Object value) {
        return (DeletePost) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "postApi.getPostStar".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetPostStar#execute()} method to invoke the remote operation.
     *
     * @param postSafeKey
     * @return the request
     */
    public GetPostStar getPostStar(java.lang.String postSafeKey) throws java.io.IOException {
      GetPostStar result = new GetPostStar(postSafeKey);
      initialize(result);
      return result;
    }

    public class GetPostStar extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.UserCollection> {

      private static final String REST_PATH = "usercollection/{postSafeKey}";

      /**
       * Create a request for the method "postApi.getPostStar".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetPostStar#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetPostStar#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param postSafeKey
       * @since 1.13
       */
      protected GetPostStar(java.lang.String postSafeKey) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.UserCollection.class);
        this.postSafeKey = com.google.api.client.util.Preconditions.checkNotNull(postSafeKey, "Required parameter postSafeKey must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetPostStar setAlt(java.lang.String alt) {
        return (GetPostStar) super.setAlt(alt);
      }

      @Override
      public GetPostStar setFields(java.lang.String fields) {
        return (GetPostStar) super.setFields(fields);
      }

      @Override
      public GetPostStar setKey(java.lang.String key) {
        return (GetPostStar) super.setKey(key);
      }

      @Override
      public GetPostStar setOauthToken(java.lang.String oauthToken) {
        return (GetPostStar) super.setOauthToken(oauthToken);
      }

      @Override
      public GetPostStar setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetPostStar) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetPostStar setQuotaUser(java.lang.String quotaUser) {
        return (GetPostStar) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetPostStar setUserIp(java.lang.String userIp) {
        return (GetPostStar) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String postSafeKey;

      /**

       */
      public java.lang.String getPostSafeKey() {
        return postSafeKey;
      }

      public GetPostStar setPostSafeKey(java.lang.String postSafeKey) {
        this.postSafeKey = postSafeKey;
        return this;
      }

      @Override
      public GetPostStar set(String parameterName, Object value) {
        return (GetPostStar) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "postApi.getSinglePost".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetSinglePost#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param postSafeKey
     * @return the request
     */
    public GetSinglePost getSinglePost(java.lang.Long userId, java.lang.String postSafeKey) throws java.io.IOException {
      GetSinglePost result = new GetSinglePost(userId, postSafeKey);
      initialize(result);
      return result;
    }

    public class GetSinglePost extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.PostFeed> {

      private static final String REST_PATH = "getSinglePost/{userId}/{postSafeKey}";

      /**
       * Create a request for the method "postApi.getSinglePost".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetSinglePost#execute()} method to invoke the remote operation. <p>
       * {@link GetSinglePost#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param userId
       * @param postSafeKey
       * @since 1.13
       */
      protected GetSinglePost(java.lang.Long userId, java.lang.String postSafeKey) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.PostFeed.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.postSafeKey = com.google.api.client.util.Preconditions.checkNotNull(postSafeKey, "Required parameter postSafeKey must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetSinglePost setAlt(java.lang.String alt) {
        return (GetSinglePost) super.setAlt(alt);
      }

      @Override
      public GetSinglePost setFields(java.lang.String fields) {
        return (GetSinglePost) super.setFields(fields);
      }

      @Override
      public GetSinglePost setKey(java.lang.String key) {
        return (GetSinglePost) super.setKey(key);
      }

      @Override
      public GetSinglePost setOauthToken(java.lang.String oauthToken) {
        return (GetSinglePost) super.setOauthToken(oauthToken);
      }

      @Override
      public GetSinglePost setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetSinglePost) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetSinglePost setQuotaUser(java.lang.String quotaUser) {
        return (GetSinglePost) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetSinglePost setUserIp(java.lang.String userIp) {
        return (GetSinglePost) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetSinglePost setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String postSafeKey;

      /**

       */
      public java.lang.String getPostSafeKey() {
        return postSafeKey;
      }

      public GetSinglePost setPostSafeKey(java.lang.String postSafeKey) {
        this.postSafeKey = postSafeKey;
        return this;
      }

      @Override
      public GetSinglePost set(String parameterName, Object value) {
        return (GetSinglePost) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "postApi.getTaggedUser".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetTaggedUser#execute()} method to invoke the remote operation.
     *
     * @param postId
     * @return the request
     */
    public GetTaggedUser getTaggedUser(java.lang.Long postId) throws java.io.IOException {
      GetTaggedUser result = new GetTaggedUser(postId);
      initialize(result);
      return result;
    }

    public class GetTaggedUser extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.UserCollection> {

      private static final String REST_PATH = "getTaggedUser/{postId}";

      /**
       * Create a request for the method "postApi.getTaggedUser".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetTaggedUser#execute()} method to invoke the remote operation. <p>
       * {@link GetTaggedUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param postId
       * @since 1.13
       */
      protected GetTaggedUser(java.lang.Long postId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.UserCollection.class);
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetTaggedUser setAlt(java.lang.String alt) {
        return (GetTaggedUser) super.setAlt(alt);
      }

      @Override
      public GetTaggedUser setFields(java.lang.String fields) {
        return (GetTaggedUser) super.setFields(fields);
      }

      @Override
      public GetTaggedUser setKey(java.lang.String key) {
        return (GetTaggedUser) super.setKey(key);
      }

      @Override
      public GetTaggedUser setOauthToken(java.lang.String oauthToken) {
        return (GetTaggedUser) super.setOauthToken(oauthToken);
      }

      @Override
      public GetTaggedUser setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetTaggedUser) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetTaggedUser setQuotaUser(java.lang.String quotaUser) {
        return (GetTaggedUser) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetTaggedUser setUserIp(java.lang.String userIp) {
        return (GetTaggedUser) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long postId;

      /**

       */
      public java.lang.Long getPostId() {
        return postId;
      }

      public GetTaggedUser setPostId(java.lang.Long postId) {
        this.postId = postId;
        return this;
      }

      @Override
      public GetTaggedUser set(String parameterName, Object value) {
        return (GetTaggedUser) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "postApi.postStar".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link PostStar#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param postSafeKey
     * @return the request
     */
    public PostStar postStar(java.lang.Long userId, java.lang.String postSafeKey) throws java.io.IOException {
      PostStar result = new PostStar(userId, postSafeKey);
      initialize(result);
      return result;
    }

    public class PostStar extends ZeemRequest<Void> {

      private static final String REST_PATH = "postStar/{userId}/{postSafeKey}";

      /**
       * Create a request for the method "postApi.postStar".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link PostStar#execute()} method to invoke the remote operation. <p>
       * {@link
       * PostStar#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param postSafeKey
       * @since 1.13
       */
      protected PostStar(java.lang.Long userId, java.lang.String postSafeKey) {
        super(Zeem.this, "POST", REST_PATH, null, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.postSafeKey = com.google.api.client.util.Preconditions.checkNotNull(postSafeKey, "Required parameter postSafeKey must be specified.");
      }

      @Override
      public PostStar setAlt(java.lang.String alt) {
        return (PostStar) super.setAlt(alt);
      }

      @Override
      public PostStar setFields(java.lang.String fields) {
        return (PostStar) super.setFields(fields);
      }

      @Override
      public PostStar setKey(java.lang.String key) {
        return (PostStar) super.setKey(key);
      }

      @Override
      public PostStar setOauthToken(java.lang.String oauthToken) {
        return (PostStar) super.setOauthToken(oauthToken);
      }

      @Override
      public PostStar setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (PostStar) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public PostStar setQuotaUser(java.lang.String quotaUser) {
        return (PostStar) super.setQuotaUser(quotaUser);
      }

      @Override
      public PostStar setUserIp(java.lang.String userIp) {
        return (PostStar) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public PostStar setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String postSafeKey;

      /**

       */
      public java.lang.String getPostSafeKey() {
        return postSafeKey;
      }

      public PostStar setPostSafeKey(java.lang.String postSafeKey) {
        this.postSafeKey = postSafeKey;
        return this;
      }

      @Override
      public PostStar set(String parameterName, Object value) {
        return (PostStar) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "postApi.report".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link Report#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param postSafeKey
     * @param reportType
     * @return the request
     */
    public Report report(java.lang.Long userId, java.lang.String postSafeKey, java.lang.String reportType) throws java.io.IOException {
      Report result = new Report(userId, postSafeKey, reportType);
      initialize(result);
      return result;
    }

    public class Report extends ZeemRequest<Void> {

      private static final String REST_PATH = "report/{userId}/{postSafeKey}/{reportType}";

      /**
       * Create a request for the method "postApi.report".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link Report#execute()} method to invoke the remote operation. <p> {@link
       * Report#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param postSafeKey
       * @param reportType
       * @since 1.13
       */
      protected Report(java.lang.Long userId, java.lang.String postSafeKey, java.lang.String reportType) {
        super(Zeem.this, "POST", REST_PATH, null, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.postSafeKey = com.google.api.client.util.Preconditions.checkNotNull(postSafeKey, "Required parameter postSafeKey must be specified.");
        this.reportType = com.google.api.client.util.Preconditions.checkNotNull(reportType, "Required parameter reportType must be specified.");
      }

      @Override
      public Report setAlt(java.lang.String alt) {
        return (Report) super.setAlt(alt);
      }

      @Override
      public Report setFields(java.lang.String fields) {
        return (Report) super.setFields(fields);
      }

      @Override
      public Report setKey(java.lang.String key) {
        return (Report) super.setKey(key);
      }

      @Override
      public Report setOauthToken(java.lang.String oauthToken) {
        return (Report) super.setOauthToken(oauthToken);
      }

      @Override
      public Report setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Report) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Report setQuotaUser(java.lang.String quotaUser) {
        return (Report) super.setQuotaUser(quotaUser);
      }

      @Override
      public Report setUserIp(java.lang.String userIp) {
        return (Report) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public Report setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String postSafeKey;

      /**

       */
      public java.lang.String getPostSafeKey() {
        return postSafeKey;
      }

      public Report setPostSafeKey(java.lang.String postSafeKey) {
        this.postSafeKey = postSafeKey;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String reportType;

      /**

       */
      public java.lang.String getReportType() {
        return reportType;
      }

      public Report setReportType(java.lang.String reportType) {
        this.reportType = reportType;
        return this;
      }

      @Override
      public Report set(String parameterName, Object value) {
        return (Report) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "postApi.savePost".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link SavePost#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param postSafeKey
     * @return the request
     */
    public SavePost savePost(java.lang.Long userId, java.lang.String postSafeKey) throws java.io.IOException {
      SavePost result = new SavePost(userId, postSafeKey);
      initialize(result);
      return result;
    }

    public class SavePost extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.TaskComplete> {

      private static final String REST_PATH = "savePost/{userId}/{postSafeKey}";

      /**
       * Create a request for the method "postApi.savePost".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link SavePost#execute()} method to invoke the remote operation. <p>
       * {@link
       * SavePost#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param postSafeKey
       * @since 1.13
       */
      protected SavePost(java.lang.Long userId, java.lang.String postSafeKey) {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.TaskComplete.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.postSafeKey = com.google.api.client.util.Preconditions.checkNotNull(postSafeKey, "Required parameter postSafeKey must be specified.");
      }

      @Override
      public SavePost setAlt(java.lang.String alt) {
        return (SavePost) super.setAlt(alt);
      }

      @Override
      public SavePost setFields(java.lang.String fields) {
        return (SavePost) super.setFields(fields);
      }

      @Override
      public SavePost setKey(java.lang.String key) {
        return (SavePost) super.setKey(key);
      }

      @Override
      public SavePost setOauthToken(java.lang.String oauthToken) {
        return (SavePost) super.setOauthToken(oauthToken);
      }

      @Override
      public SavePost setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SavePost) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SavePost setQuotaUser(java.lang.String quotaUser) {
        return (SavePost) super.setQuotaUser(quotaUser);
      }

      @Override
      public SavePost setUserIp(java.lang.String userIp) {
        return (SavePost) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public SavePost setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String postSafeKey;

      /**

       */
      public java.lang.String getPostSafeKey() {
        return postSafeKey;
      }

      public SavePost setPostSafeKey(java.lang.String postSafeKey) {
        this.postSafeKey = postSafeKey;
        return this;
      }

      @Override
      public SavePost set(String parameterName, Object value) {
        return (SavePost) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "postApi.tagApproved".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link TagApproved#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param postId
     * @param isPublic
     * @return the request
     */
    public TagApproved tagApproved(java.lang.Long userId, java.lang.Long postId, java.lang.Boolean isPublic) throws java.io.IOException {
      TagApproved result = new TagApproved(userId, postId, isPublic);
      initialize(result);
      return result;
    }

    public class TagApproved extends ZeemRequest<Void> {

      private static final String REST_PATH = "tagApproved/{userId}/{postId}/{isPublic}";

      /**
       * Create a request for the method "postApi.tagApproved".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link TagApproved#execute()} method to invoke the remote operation. <p>
       * {@link
       * TagApproved#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param postId
       * @param isPublic
       * @since 1.13
       */
      protected TagApproved(java.lang.Long userId, java.lang.Long postId, java.lang.Boolean isPublic) {
        super(Zeem.this, "POST", REST_PATH, null, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.postId = com.google.api.client.util.Preconditions.checkNotNull(postId, "Required parameter postId must be specified.");
        this.isPublic = com.google.api.client.util.Preconditions.checkNotNull(isPublic, "Required parameter isPublic must be specified.");
      }

      @Override
      public TagApproved setAlt(java.lang.String alt) {
        return (TagApproved) super.setAlt(alt);
      }

      @Override
      public TagApproved setFields(java.lang.String fields) {
        return (TagApproved) super.setFields(fields);
      }

      @Override
      public TagApproved setKey(java.lang.String key) {
        return (TagApproved) super.setKey(key);
      }

      @Override
      public TagApproved setOauthToken(java.lang.String oauthToken) {
        return (TagApproved) super.setOauthToken(oauthToken);
      }

      @Override
      public TagApproved setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (TagApproved) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public TagApproved setQuotaUser(java.lang.String quotaUser) {
        return (TagApproved) super.setQuotaUser(quotaUser);
      }

      @Override
      public TagApproved setUserIp(java.lang.String userIp) {
        return (TagApproved) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public TagApproved setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long postId;

      /**

       */
      public java.lang.Long getPostId() {
        return postId;
      }

      public TagApproved setPostId(java.lang.Long postId) {
        this.postId = postId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Boolean isPublic;

      /**

       */
      public java.lang.Boolean getIsPublic() {
        return isPublic;
      }

      public TagApproved setIsPublic(java.lang.Boolean isPublic) {
        this.isPublic = isPublic;
        return this;
      }

      @Override
      public TagApproved set(String parameterName, Object value) {
        return (TagApproved) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the SearchApi collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Zeem zeem = new Zeem(...);}
   *   {@code Zeem.SearchApi.List request = zeem.searchApi().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public SearchApi searchApi() {
    return new SearchApi();
  }

  /**
   * The "searchApi" collection of methods.
   */
  public class SearchApi {

    /**
     * Create a request for the method "searchApi.filterBadgePost".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link FilterBadgePost#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param mode
     * @param badge
     * @return the request
     */
    public FilterBadgePost filterBadgePost(java.lang.Long userId, java.lang.String mode, java.lang.Integer badge) throws java.io.IOException {
      FilterBadgePost result = new FilterBadgePost(userId, mode, badge);
      initialize(result);
      return result;
    }

    public class FilterBadgePost extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.PostFeed> {

      private static final String REST_PATH = "filterBadgePost/{userId}/{mode}/{badge}";

      /**
       * Create a request for the method "searchApi.filterBadgePost".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link FilterBadgePost#execute()} method to invoke the remote operation.
       * <p> {@link FilterBadgePost#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
       * lientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param userId
       * @param mode
       * @param badge
       * @since 1.13
       */
      protected FilterBadgePost(java.lang.Long userId, java.lang.String mode, java.lang.Integer badge) {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.PostFeed.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.mode = com.google.api.client.util.Preconditions.checkNotNull(mode, "Required parameter mode must be specified.");
        this.badge = com.google.api.client.util.Preconditions.checkNotNull(badge, "Required parameter badge must be specified.");
      }

      @Override
      public FilterBadgePost setAlt(java.lang.String alt) {
        return (FilterBadgePost) super.setAlt(alt);
      }

      @Override
      public FilterBadgePost setFields(java.lang.String fields) {
        return (FilterBadgePost) super.setFields(fields);
      }

      @Override
      public FilterBadgePost setKey(java.lang.String key) {
        return (FilterBadgePost) super.setKey(key);
      }

      @Override
      public FilterBadgePost setOauthToken(java.lang.String oauthToken) {
        return (FilterBadgePost) super.setOauthToken(oauthToken);
      }

      @Override
      public FilterBadgePost setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (FilterBadgePost) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public FilterBadgePost setQuotaUser(java.lang.String quotaUser) {
        return (FilterBadgePost) super.setQuotaUser(quotaUser);
      }

      @Override
      public FilterBadgePost setUserIp(java.lang.String userIp) {
        return (FilterBadgePost) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public FilterBadgePost setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String mode;

      /**

       */
      public java.lang.String getMode() {
        return mode;
      }

      public FilterBadgePost setMode(java.lang.String mode) {
        this.mode = mode;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer badge;

      /**

       */
      public java.lang.Integer getBadge() {
        return badge;
      }

      public FilterBadgePost setBadge(java.lang.Integer badge) {
        this.badge = badge;
        return this;
      }

      @Override
      public FilterBadgePost set(String parameterName, Object value) {
        return (FilterBadgePost) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "searchApi.filterBadgeUser".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link FilterBadgeUser#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param relation
     * @param badge
     * @return the request
     */
    public FilterBadgeUser filterBadgeUser(java.lang.Long userId, java.lang.String relation, java.lang.Integer badge) throws java.io.IOException {
      FilterBadgeUser result = new FilterBadgeUser(userId, relation, badge);
      initialize(result);
      return result;
    }

    public class FilterBadgeUser extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.UserCollection> {

      private static final String REST_PATH = "filterBadgeUser/{userId}/{relation}/{badge}";

      /**
       * Create a request for the method "searchApi.filterBadgeUser".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link FilterBadgeUser#execute()} method to invoke the remote operation.
       * <p> {@link FilterBadgeUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
       * lientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param userId
       * @param relation
       * @param badge
       * @since 1.13
       */
      protected FilterBadgeUser(java.lang.Long userId, java.lang.String relation, java.lang.Integer badge) {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.UserCollection.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.relation = com.google.api.client.util.Preconditions.checkNotNull(relation, "Required parameter relation must be specified.");
        this.badge = com.google.api.client.util.Preconditions.checkNotNull(badge, "Required parameter badge must be specified.");
      }

      @Override
      public FilterBadgeUser setAlt(java.lang.String alt) {
        return (FilterBadgeUser) super.setAlt(alt);
      }

      @Override
      public FilterBadgeUser setFields(java.lang.String fields) {
        return (FilterBadgeUser) super.setFields(fields);
      }

      @Override
      public FilterBadgeUser setKey(java.lang.String key) {
        return (FilterBadgeUser) super.setKey(key);
      }

      @Override
      public FilterBadgeUser setOauthToken(java.lang.String oauthToken) {
        return (FilterBadgeUser) super.setOauthToken(oauthToken);
      }

      @Override
      public FilterBadgeUser setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (FilterBadgeUser) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public FilterBadgeUser setQuotaUser(java.lang.String quotaUser) {
        return (FilterBadgeUser) super.setQuotaUser(quotaUser);
      }

      @Override
      public FilterBadgeUser setUserIp(java.lang.String userIp) {
        return (FilterBadgeUser) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public FilterBadgeUser setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String relation;

      /**

       */
      public java.lang.String getRelation() {
        return relation;
      }

      public FilterBadgeUser setRelation(java.lang.String relation) {
        this.relation = relation;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer badge;

      /**

       */
      public java.lang.Integer getBadge() {
        return badge;
      }

      public FilterBadgeUser setBadge(java.lang.Integer badge) {
        this.badge = badge;
        return this;
      }

      @Override
      public FilterBadgeUser set(String parameterName, Object value) {
        return (FilterBadgeUser) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "searchApi.findUser".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link FindUser#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public FindUser findUser() throws java.io.IOException {
      FindUser result = new FindUser();
      initialize(result);
      return result;
    }

    public class FindUser extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.User> {

      private static final String REST_PATH = "findUser";

      /**
       * Create a request for the method "searchApi.findUser".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link FindUser#execute()} method to invoke the remote operation. <p>
       * {@link
       * FindUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected FindUser() {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.User.class);
      }

      @Override
      public FindUser setAlt(java.lang.String alt) {
        return (FindUser) super.setAlt(alt);
      }

      @Override
      public FindUser setFields(java.lang.String fields) {
        return (FindUser) super.setFields(fields);
      }

      @Override
      public FindUser setKey(java.lang.String key) {
        return (FindUser) super.setKey(key);
      }

      @Override
      public FindUser setOauthToken(java.lang.String oauthToken) {
        return (FindUser) super.setOauthToken(oauthToken);
      }

      @Override
      public FindUser setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (FindUser) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public FindUser setQuotaUser(java.lang.String quotaUser) {
        return (FindUser) super.setQuotaUser(quotaUser);
      }

      @Override
      public FindUser setUserIp(java.lang.String userIp) {
        return (FindUser) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String username;

      /**

       */
      public java.lang.String getUsername() {
        return username;
      }

      public FindUser setUsername(java.lang.String username) {
        this.username = username;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long phone;

      /**

       */
      public java.lang.Long getPhone() {
        return phone;
      }

      public FindUser setPhone(java.lang.Long phone) {
        this.phone = phone;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String fullName;

      /**

       */
      public java.lang.String getFullName() {
        return fullName;
      }

      public FindUser setFullName(java.lang.String fullName) {
        this.fullName = fullName;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String geoHash;

      /**

       */
      public java.lang.String getGeoHash() {
        return geoHash;
      }

      public FindUser setGeoHash(java.lang.String geoHash) {
        this.geoHash = geoHash;
        return this;
      }

      @Override
      public FindUser set(String parameterName, Object value) {
        return (FindUser) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "searchApi.getMentionUser".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetMentionUser#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param postType
     * @param isAnonymous
     * @return the request
     */
    public GetMentionUser getMentionUser(java.lang.Long userId, java.lang.String postType, java.lang.Boolean isAnonymous) throws java.io.IOException {
      GetMentionUser result = new GetMentionUser(userId, postType, isAnonymous);
      initialize(result);
      return result;
    }

    public class GetMentionUser extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.UserCollection> {

      private static final String REST_PATH = "usercollection/{userId}/{postType}/{isAnonymous}";

      /**
       * Create a request for the method "searchApi.getMentionUser".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetMentionUser#execute()} method to invoke the remote operation.
       * <p> {@link GetMentionUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param userId
       * @param postType
       * @param isAnonymous
       * @since 1.13
       */
      protected GetMentionUser(java.lang.Long userId, java.lang.String postType, java.lang.Boolean isAnonymous) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.UserCollection.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.postType = com.google.api.client.util.Preconditions.checkNotNull(postType, "Required parameter postType must be specified.");
        this.isAnonymous = com.google.api.client.util.Preconditions.checkNotNull(isAnonymous, "Required parameter isAnonymous must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetMentionUser setAlt(java.lang.String alt) {
        return (GetMentionUser) super.setAlt(alt);
      }

      @Override
      public GetMentionUser setFields(java.lang.String fields) {
        return (GetMentionUser) super.setFields(fields);
      }

      @Override
      public GetMentionUser setKey(java.lang.String key) {
        return (GetMentionUser) super.setKey(key);
      }

      @Override
      public GetMentionUser setOauthToken(java.lang.String oauthToken) {
        return (GetMentionUser) super.setOauthToken(oauthToken);
      }

      @Override
      public GetMentionUser setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetMentionUser) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetMentionUser setQuotaUser(java.lang.String quotaUser) {
        return (GetMentionUser) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetMentionUser setUserIp(java.lang.String userIp) {
        return (GetMentionUser) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetMentionUser setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String postType;

      /**

       */
      public java.lang.String getPostType() {
        return postType;
      }

      public GetMentionUser setPostType(java.lang.String postType) {
        this.postType = postType;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Boolean isAnonymous;

      /**

       */
      public java.lang.Boolean getIsAnonymous() {
        return isAnonymous;
      }

      public GetMentionUser setIsAnonymous(java.lang.Boolean isAnonymous) {
        this.isAnonymous = isAnonymous;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String searchName;

      /**

       */
      public java.lang.String getSearchName() {
        return searchName;
      }

      public GetMentionUser setSearchName(java.lang.String searchName) {
        this.searchName = searchName;
        return this;
      }

      @Override
      public GetMentionUser set(String parameterName, Object value) {
        return (GetMentionUser) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "searchApi.getRelationship".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetRelationship#execute()} method to invoke the remote operation.
     *
     * @param myUserId
     * @param userId
     * @return the request
     */
    public GetRelationship getRelationship(java.lang.Long myUserId, java.lang.Long userId) throws java.io.IOException {
      GetRelationship result = new GetRelationship(myUserId, userId);
      initialize(result);
      return result;
    }

    public class GetRelationship extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.Relationship> {

      private static final String REST_PATH = "relationship/{myUserId}/{userId}";

      /**
       * Create a request for the method "searchApi.getRelationship".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetRelationship#execute()} method to invoke the remote operation.
       * <p> {@link GetRelationship#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
       * lientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param myUserId
       * @param userId
       * @since 1.13
       */
      protected GetRelationship(java.lang.Long myUserId, java.lang.Long userId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.Relationship.class);
        this.myUserId = com.google.api.client.util.Preconditions.checkNotNull(myUserId, "Required parameter myUserId must be specified.");
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetRelationship setAlt(java.lang.String alt) {
        return (GetRelationship) super.setAlt(alt);
      }

      @Override
      public GetRelationship setFields(java.lang.String fields) {
        return (GetRelationship) super.setFields(fields);
      }

      @Override
      public GetRelationship setKey(java.lang.String key) {
        return (GetRelationship) super.setKey(key);
      }

      @Override
      public GetRelationship setOauthToken(java.lang.String oauthToken) {
        return (GetRelationship) super.setOauthToken(oauthToken);
      }

      @Override
      public GetRelationship setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetRelationship) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetRelationship setQuotaUser(java.lang.String quotaUser) {
        return (GetRelationship) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetRelationship setUserIp(java.lang.String userIp) {
        return (GetRelationship) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long myUserId;

      /**

       */
      public java.lang.Long getMyUserId() {
        return myUserId;
      }

      public GetRelationship setMyUserId(java.lang.Long myUserId) {
        this.myUserId = myUserId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetRelationship setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public GetRelationship set(String parameterName, Object value) {
        return (GetRelationship) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "searchApi.nearBy".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link NearBy#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param latitude
     * @param longitude
     * @param relation
     * @return the request
     */
    public NearBy nearBy(java.lang.Long userId, java.lang.Double latitude, java.lang.Double longitude, java.lang.String relation) throws java.io.IOException {
      NearBy result = new NearBy(userId, latitude, longitude, relation);
      initialize(result);
      return result;
    }

    public class NearBy extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.UserCollection> {

      private static final String REST_PATH = "nearBy/{userId}/{latitude}/{longitude}/{Relation}";

      /**
       * Create a request for the method "searchApi.nearBy".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link NearBy#execute()} method to invoke the remote operation. <p> {@link
       * NearBy#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param latitude
       * @param longitude
       * @param relation
       * @since 1.13
       */
      protected NearBy(java.lang.Long userId, java.lang.Double latitude, java.lang.Double longitude, java.lang.String relation) {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.UserCollection.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.latitude = com.google.api.client.util.Preconditions.checkNotNull(latitude, "Required parameter latitude must be specified.");
        this.longitude = com.google.api.client.util.Preconditions.checkNotNull(longitude, "Required parameter longitude must be specified.");
        this.relation = com.google.api.client.util.Preconditions.checkNotNull(relation, "Required parameter relation must be specified.");
      }

      @Override
      public NearBy setAlt(java.lang.String alt) {
        return (NearBy) super.setAlt(alt);
      }

      @Override
      public NearBy setFields(java.lang.String fields) {
        return (NearBy) super.setFields(fields);
      }

      @Override
      public NearBy setKey(java.lang.String key) {
        return (NearBy) super.setKey(key);
      }

      @Override
      public NearBy setOauthToken(java.lang.String oauthToken) {
        return (NearBy) super.setOauthToken(oauthToken);
      }

      @Override
      public NearBy setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (NearBy) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public NearBy setQuotaUser(java.lang.String quotaUser) {
        return (NearBy) super.setQuotaUser(quotaUser);
      }

      @Override
      public NearBy setUserIp(java.lang.String userIp) {
        return (NearBy) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public NearBy setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Double latitude;

      /**

       */
      public java.lang.Double getLatitude() {
        return latitude;
      }

      public NearBy setLatitude(java.lang.Double latitude) {
        this.latitude = latitude;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Double longitude;

      /**

       */
      public java.lang.Double getLongitude() {
        return longitude;
      }

      public NearBy setLongitude(java.lang.Double longitude) {
        this.longitude = longitude;
        return this;
      }

      @com.google.api.client.util.Key("Relation")
      private java.lang.String relation;

      /**

       */
      public java.lang.String getRelation() {
        return relation;
      }

      public NearBy setRelation(java.lang.String relation) {
        this.relation = relation;
        return this;
      }

      @Override
      public NearBy set(String parameterName, Object value) {
        return (NearBy) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "searchApi.searchUser".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link SearchUser#execute()} method to invoke the remote operation.
     *
     * @param searchName
     * @return the request
     */
    public SearchUser searchUser(java.lang.String searchName) throws java.io.IOException {
      SearchUser result = new SearchUser(searchName);
      initialize(result);
      return result;
    }

    public class SearchUser extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.UserCollection> {

      private static final String REST_PATH = "searchUser/{searchName}";

      /**
       * Create a request for the method "searchApi.searchUser".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link SearchUser#execute()} method to invoke the remote operation. <p>
       * {@link
       * SearchUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param searchName
       * @since 1.13
       */
      protected SearchUser(java.lang.String searchName) {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.UserCollection.class);
        this.searchName = com.google.api.client.util.Preconditions.checkNotNull(searchName, "Required parameter searchName must be specified.");
      }

      @Override
      public SearchUser setAlt(java.lang.String alt) {
        return (SearchUser) super.setAlt(alt);
      }

      @Override
      public SearchUser setFields(java.lang.String fields) {
        return (SearchUser) super.setFields(fields);
      }

      @Override
      public SearchUser setKey(java.lang.String key) {
        return (SearchUser) super.setKey(key);
      }

      @Override
      public SearchUser setOauthToken(java.lang.String oauthToken) {
        return (SearchUser) super.setOauthToken(oauthToken);
      }

      @Override
      public SearchUser setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SearchUser) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SearchUser setQuotaUser(java.lang.String quotaUser) {
        return (SearchUser) super.setQuotaUser(quotaUser);
      }

      @Override
      public SearchUser setUserIp(java.lang.String userIp) {
        return (SearchUser) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String searchName;

      /**

       */
      public java.lang.String getSearchName() {
        return searchName;
      }

      public SearchUser setSearchName(java.lang.String searchName) {
        this.searchName = searchName;
        return this;
      }

      @Override
      public SearchUser set(String parameterName, Object value) {
        return (SearchUser) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "searchApi.topPost".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link TopPost#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param mode
     * @return the request
     */
    public TopPost topPost(java.lang.Long userId, java.lang.String mode) throws java.io.IOException {
      TopPost result = new TopPost(userId, mode);
      initialize(result);
      return result;
    }

    public class TopPost extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.PostFeed> {

      private static final String REST_PATH = "topPost/{userId}/{mode}";

      /**
       * Create a request for the method "searchApi.topPost".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link TopPost#execute()} method to invoke the remote operation. <p>
       * {@link
       * TopPost#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param mode
       * @since 1.13
       */
      protected TopPost(java.lang.Long userId, java.lang.String mode) {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.PostFeed.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.mode = com.google.api.client.util.Preconditions.checkNotNull(mode, "Required parameter mode must be specified.");
      }

      @Override
      public TopPost setAlt(java.lang.String alt) {
        return (TopPost) super.setAlt(alt);
      }

      @Override
      public TopPost setFields(java.lang.String fields) {
        return (TopPost) super.setFields(fields);
      }

      @Override
      public TopPost setKey(java.lang.String key) {
        return (TopPost) super.setKey(key);
      }

      @Override
      public TopPost setOauthToken(java.lang.String oauthToken) {
        return (TopPost) super.setOauthToken(oauthToken);
      }

      @Override
      public TopPost setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (TopPost) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public TopPost setQuotaUser(java.lang.String quotaUser) {
        return (TopPost) super.setQuotaUser(quotaUser);
      }

      @Override
      public TopPost setUserIp(java.lang.String userIp) {
        return (TopPost) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public TopPost setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String mode;

      /**

       */
      public java.lang.String getMode() {
        return mode;
      }

      public TopPost setMode(java.lang.String mode) {
        this.mode = mode;
        return this;
      }

      @Override
      public TopPost set(String parameterName, Object value) {
        return (TopPost) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the StoryApi collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Zeem zeem = new Zeem(...);}
   *   {@code Zeem.StoryApi.List request = zeem.storyApi().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public StoryApi storyApi() {
    return new StoryApi();
  }

  /**
   * The "storyApi" collection of methods.
   */
  public class StoryApi {

    /**
     * Create a request for the method "storyApi.createStory".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link CreateStory#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param mode
     * @param content the {@link com.appspot.octabyte_zeem.zeem.model.Stories}
     * @return the request
     */
    public CreateStory createStory(java.lang.Long userId, java.lang.String mode, com.appspot.octabyte_zeem.zeem.model.Stories content) throws java.io.IOException {
      CreateStory result = new CreateStory(userId, mode, content);
      initialize(result);
      return result;
    }

    public class CreateStory extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.Story> {

      private static final String REST_PATH = "createStory/{userId}/{mode}";

      /**
       * Create a request for the method "storyApi.createStory".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link CreateStory#execute()} method to invoke the remote operation. <p>
       * {@link
       * CreateStory#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param mode
       * @param content the {@link com.appspot.octabyte_zeem.zeem.model.Stories}
       * @since 1.13
       */
      protected CreateStory(java.lang.Long userId, java.lang.String mode, com.appspot.octabyte_zeem.zeem.model.Stories content) {
        super(Zeem.this, "POST", REST_PATH, content, com.appspot.octabyte_zeem.zeem.model.Story.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.mode = com.google.api.client.util.Preconditions.checkNotNull(mode, "Required parameter mode must be specified.");
      }

      @Override
      public CreateStory setAlt(java.lang.String alt) {
        return (CreateStory) super.setAlt(alt);
      }

      @Override
      public CreateStory setFields(java.lang.String fields) {
        return (CreateStory) super.setFields(fields);
      }

      @Override
      public CreateStory setKey(java.lang.String key) {
        return (CreateStory) super.setKey(key);
      }

      @Override
      public CreateStory setOauthToken(java.lang.String oauthToken) {
        return (CreateStory) super.setOauthToken(oauthToken);
      }

      @Override
      public CreateStory setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (CreateStory) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public CreateStory setQuotaUser(java.lang.String quotaUser) {
        return (CreateStory) super.setQuotaUser(quotaUser);
      }

      @Override
      public CreateStory setUserIp(java.lang.String userIp) {
        return (CreateStory) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public CreateStory setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String mode;

      /**

       */
      public java.lang.String getMode() {
        return mode;
      }

      public CreateStory setMode(java.lang.String mode) {
        this.mode = mode;
        return this;
      }

      @Override
      public CreateStory set(String parameterName, Object value) {
        return (CreateStory) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "storyApi.getStoryComments".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetStoryComments#execute()} method to invoke the remote operation.
     *
     * @param storyId
     * @param storyNum
     * @return the request
     */
    public GetStoryComments getStoryComments(java.lang.Long storyId, java.lang.Integer storyNum) throws java.io.IOException {
      GetStoryComments result = new GetStoryComments(storyId, storyNum);
      initialize(result);
      return result;
    }

    public class GetStoryComments extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.CommentResponse> {

      private static final String REST_PATH = "getStoryComments/{storyId}/{storyNum}";

      /**
       * Create a request for the method "storyApi.getStoryComments".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetStoryComments#execute()} method to invoke the remote operation.
       * <p> {@link GetStoryComments#initialize(com.google.api.client.googleapis.services.AbstractGoogle
       * ClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param storyId
       * @param storyNum
       * @since 1.13
       */
      protected GetStoryComments(java.lang.Long storyId, java.lang.Integer storyNum) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.CommentResponse.class);
        this.storyId = com.google.api.client.util.Preconditions.checkNotNull(storyId, "Required parameter storyId must be specified.");
        this.storyNum = com.google.api.client.util.Preconditions.checkNotNull(storyNum, "Required parameter storyNum must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetStoryComments setAlt(java.lang.String alt) {
        return (GetStoryComments) super.setAlt(alt);
      }

      @Override
      public GetStoryComments setFields(java.lang.String fields) {
        return (GetStoryComments) super.setFields(fields);
      }

      @Override
      public GetStoryComments setKey(java.lang.String key) {
        return (GetStoryComments) super.setKey(key);
      }

      @Override
      public GetStoryComments setOauthToken(java.lang.String oauthToken) {
        return (GetStoryComments) super.setOauthToken(oauthToken);
      }

      @Override
      public GetStoryComments setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetStoryComments) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetStoryComments setQuotaUser(java.lang.String quotaUser) {
        return (GetStoryComments) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetStoryComments setUserIp(java.lang.String userIp) {
        return (GetStoryComments) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long storyId;

      /**

       */
      public java.lang.Long getStoryId() {
        return storyId;
      }

      public GetStoryComments setStoryId(java.lang.Long storyId) {
        this.storyId = storyId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer storyNum;

      /**

       */
      public java.lang.Integer getStoryNum() {
        return storyNum;
      }

      public GetStoryComments setStoryNum(java.lang.Integer storyNum) {
        this.storyNum = storyNum;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public GetStoryComments setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @Override
      public GetStoryComments set(String parameterName, Object value) {
        return (GetStoryComments) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "storyApi.postStoryComment".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link PostStoryComment#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param storySafeKey
     * @param content the {@link com.appspot.octabyte_zeem.zeem.model.StoryComment}
     * @return the request
     */
    public PostStoryComment postStoryComment(java.lang.Long userId, java.lang.String storySafeKey, com.appspot.octabyte_zeem.zeem.model.StoryComment content) throws java.io.IOException {
      PostStoryComment result = new PostStoryComment(userId, storySafeKey, content);
      initialize(result);
      return result;
    }

    public class PostStoryComment extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.StoryComment> {

      private static final String REST_PATH = "postStoryComment/{userId}/{storySafeKey}";

      /**
       * Create a request for the method "storyApi.postStoryComment".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link PostStoryComment#execute()} method to invoke the remote operation.
       * <p> {@link PostStoryComment#initialize(com.google.api.client.googleapis.services.AbstractGoogle
       * ClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param userId
       * @param storySafeKey
       * @param content the {@link com.appspot.octabyte_zeem.zeem.model.StoryComment}
       * @since 1.13
       */
      protected PostStoryComment(java.lang.Long userId, java.lang.String storySafeKey, com.appspot.octabyte_zeem.zeem.model.StoryComment content) {
        super(Zeem.this, "POST", REST_PATH, content, com.appspot.octabyte_zeem.zeem.model.StoryComment.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.storySafeKey = com.google.api.client.util.Preconditions.checkNotNull(storySafeKey, "Required parameter storySafeKey must be specified.");
      }

      @Override
      public PostStoryComment setAlt(java.lang.String alt) {
        return (PostStoryComment) super.setAlt(alt);
      }

      @Override
      public PostStoryComment setFields(java.lang.String fields) {
        return (PostStoryComment) super.setFields(fields);
      }

      @Override
      public PostStoryComment setKey(java.lang.String key) {
        return (PostStoryComment) super.setKey(key);
      }

      @Override
      public PostStoryComment setOauthToken(java.lang.String oauthToken) {
        return (PostStoryComment) super.setOauthToken(oauthToken);
      }

      @Override
      public PostStoryComment setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (PostStoryComment) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public PostStoryComment setQuotaUser(java.lang.String quotaUser) {
        return (PostStoryComment) super.setQuotaUser(quotaUser);
      }

      @Override
      public PostStoryComment setUserIp(java.lang.String userIp) {
        return (PostStoryComment) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public PostStoryComment setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String storySafeKey;

      /**

       */
      public java.lang.String getStorySafeKey() {
        return storySafeKey;
      }

      public PostStoryComment setStorySafeKey(java.lang.String storySafeKey) {
        this.storySafeKey = storySafeKey;
        return this;
      }

      @Override
      public PostStoryComment set(String parameterName, Object value) {
        return (PostStoryComment) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the UserApi collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Zeem zeem = new Zeem(...);}
   *   {@code Zeem.UserApi.List request = zeem.userApi().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public UserApi userApi() {
    return new UserApi();
  }

  /**
   * The "userApi" collection of methods.
   */
  public class UserApi {

    /**
     * Create a request for the method "userApi.deleteFeed".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link DeleteFeed#execute()} method to invoke the remote operation.
     *
     * @param feedSafeKey
     * @return the request
     */
    public DeleteFeed deleteFeed(java.lang.String feedSafeKey) throws java.io.IOException {
      DeleteFeed result = new DeleteFeed(feedSafeKey);
      initialize(result);
      return result;
    }

    public class DeleteFeed extends ZeemRequest<Void> {

      private static final String REST_PATH = "feed/{feedSafeKey}";

      /**
       * Create a request for the method "userApi.deleteFeed".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link DeleteFeed#execute()} method to invoke the remote operation. <p>
       * {@link
       * DeleteFeed#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param feedSafeKey
       * @since 1.13
       */
      protected DeleteFeed(java.lang.String feedSafeKey) {
        super(Zeem.this, "DELETE", REST_PATH, null, Void.class);
        this.feedSafeKey = com.google.api.client.util.Preconditions.checkNotNull(feedSafeKey, "Required parameter feedSafeKey must be specified.");
      }

      @Override
      public DeleteFeed setAlt(java.lang.String alt) {
        return (DeleteFeed) super.setAlt(alt);
      }

      @Override
      public DeleteFeed setFields(java.lang.String fields) {
        return (DeleteFeed) super.setFields(fields);
      }

      @Override
      public DeleteFeed setKey(java.lang.String key) {
        return (DeleteFeed) super.setKey(key);
      }

      @Override
      public DeleteFeed setOauthToken(java.lang.String oauthToken) {
        return (DeleteFeed) super.setOauthToken(oauthToken);
      }

      @Override
      public DeleteFeed setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (DeleteFeed) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public DeleteFeed setQuotaUser(java.lang.String quotaUser) {
        return (DeleteFeed) super.setQuotaUser(quotaUser);
      }

      @Override
      public DeleteFeed setUserIp(java.lang.String userIp) {
        return (DeleteFeed) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String feedSafeKey;

      /**

       */
      public java.lang.String getFeedSafeKey() {
        return feedSafeKey;
      }

      public DeleteFeed setFeedSafeKey(java.lang.String feedSafeKey) {
        this.feedSafeKey = feedSafeKey;
        return this;
      }

      @Override
      public DeleteFeed set(String parameterName, Object value) {
        return (DeleteFeed) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.deleteNotification".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link DeleteNotification#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param mode
     * @param lastNotificationId
     * @return the request
     */
    public DeleteNotification deleteNotification(java.lang.Long userId, java.lang.String mode, java.lang.Long lastNotificationId) throws java.io.IOException {
      DeleteNotification result = new DeleteNotification(userId, mode, lastNotificationId);
      initialize(result);
      return result;
    }

    public class DeleteNotification extends ZeemRequest<Void> {

      private static final String REST_PATH = "notification/{userId}/{mode}/{lastNotificationId}";

      /**
       * Create a request for the method "userApi.deleteNotification".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link DeleteNotification#execute()} method to invoke the remote
       * operation. <p> {@link DeleteNotification#initialize(com.google.api.client.googleapis.services.A
       * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param userId
       * @param mode
       * @param lastNotificationId
       * @since 1.13
       */
      protected DeleteNotification(java.lang.Long userId, java.lang.String mode, java.lang.Long lastNotificationId) {
        super(Zeem.this, "DELETE", REST_PATH, null, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.mode = com.google.api.client.util.Preconditions.checkNotNull(mode, "Required parameter mode must be specified.");
        this.lastNotificationId = com.google.api.client.util.Preconditions.checkNotNull(lastNotificationId, "Required parameter lastNotificationId must be specified.");
      }

      @Override
      public DeleteNotification setAlt(java.lang.String alt) {
        return (DeleteNotification) super.setAlt(alt);
      }

      @Override
      public DeleteNotification setFields(java.lang.String fields) {
        return (DeleteNotification) super.setFields(fields);
      }

      @Override
      public DeleteNotification setKey(java.lang.String key) {
        return (DeleteNotification) super.setKey(key);
      }

      @Override
      public DeleteNotification setOauthToken(java.lang.String oauthToken) {
        return (DeleteNotification) super.setOauthToken(oauthToken);
      }

      @Override
      public DeleteNotification setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (DeleteNotification) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public DeleteNotification setQuotaUser(java.lang.String quotaUser) {
        return (DeleteNotification) super.setQuotaUser(quotaUser);
      }

      @Override
      public DeleteNotification setUserIp(java.lang.String userIp) {
        return (DeleteNotification) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public DeleteNotification setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String mode;

      /**

       */
      public java.lang.String getMode() {
        return mode;
      }

      public DeleteNotification setMode(java.lang.String mode) {
        this.mode = mode;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long lastNotificationId;

      /**

       */
      public java.lang.Long getLastNotificationId() {
        return lastNotificationId;
      }

      public DeleteNotification setLastNotificationId(java.lang.Long lastNotificationId) {
        this.lastNotificationId = lastNotificationId;
        return this;
      }

      @Override
      public DeleteNotification set(String parameterName, Object value) {
        return (DeleteNotification) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.discover".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link Discover#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param offset
     * @return the request
     */
    public Discover discover(java.lang.Long userId, java.lang.Integer offset) throws java.io.IOException {
      Discover result = new Discover(userId, offset);
      initialize(result);
      return result;
    }

    public class Discover extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.PostFeed> {

      private static final String REST_PATH = "discover/{userId}/{offset}";

      /**
       * Create a request for the method "userApi.discover".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link Discover#execute()} method to invoke the remote operation. <p>
       * {@link
       * Discover#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param offset
       * @since 1.13
       */
      protected Discover(java.lang.Long userId, java.lang.Integer offset) {
        super(Zeem.this, "POST", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.PostFeed.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.offset = com.google.api.client.util.Preconditions.checkNotNull(offset, "Required parameter offset must be specified.");
      }

      @Override
      public Discover setAlt(java.lang.String alt) {
        return (Discover) super.setAlt(alt);
      }

      @Override
      public Discover setFields(java.lang.String fields) {
        return (Discover) super.setFields(fields);
      }

      @Override
      public Discover setKey(java.lang.String key) {
        return (Discover) super.setKey(key);
      }

      @Override
      public Discover setOauthToken(java.lang.String oauthToken) {
        return (Discover) super.setOauthToken(oauthToken);
      }

      @Override
      public Discover setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Discover) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Discover setQuotaUser(java.lang.String quotaUser) {
        return (Discover) super.setQuotaUser(quotaUser);
      }

      @Override
      public Discover setUserIp(java.lang.String userIp) {
        return (Discover) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public Discover setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer offset;

      /**

       */
      public java.lang.Integer getOffset() {
        return offset;
      }

      public Discover setOffset(java.lang.Integer offset) {
        this.offset = offset;
        return this;
      }

      @Override
      public Discover set(String parameterName, Object value) {
        return (Discover) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.generateUserSuggestion".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GenerateUserSuggestion#execute()} method to invoke the remote
     * operation.
     *
     * @param userId
     * @return the request
     */
    public GenerateUserSuggestion generateUserSuggestion(java.lang.Long userId) throws java.io.IOException {
      GenerateUserSuggestion result = new GenerateUserSuggestion(userId);
      initialize(result);
      return result;
    }

    public class GenerateUserSuggestion extends ZeemRequest<Void> {

      private static final String REST_PATH = "generateUserSuggestion/{userId}";

      /**
       * Create a request for the method "userApi.generateUserSuggestion".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GenerateUserSuggestion#execute()} method to invoke the remote
       * operation. <p> {@link GenerateUserSuggestion#initialize(com.google.api.client.googleapis.servic
       * es.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param userId
       * @since 1.13
       */
      protected GenerateUserSuggestion(java.lang.Long userId) {
        super(Zeem.this, "POST", REST_PATH, null, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public GenerateUserSuggestion setAlt(java.lang.String alt) {
        return (GenerateUserSuggestion) super.setAlt(alt);
      }

      @Override
      public GenerateUserSuggestion setFields(java.lang.String fields) {
        return (GenerateUserSuggestion) super.setFields(fields);
      }

      @Override
      public GenerateUserSuggestion setKey(java.lang.String key) {
        return (GenerateUserSuggestion) super.setKey(key);
      }

      @Override
      public GenerateUserSuggestion setOauthToken(java.lang.String oauthToken) {
        return (GenerateUserSuggestion) super.setOauthToken(oauthToken);
      }

      @Override
      public GenerateUserSuggestion setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GenerateUserSuggestion) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GenerateUserSuggestion setQuotaUser(java.lang.String quotaUser) {
        return (GenerateUserSuggestion) super.setQuotaUser(quotaUser);
      }

      @Override
      public GenerateUserSuggestion setUserIp(java.lang.String userIp) {
        return (GenerateUserSuggestion) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GenerateUserSuggestion setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public GenerateUserSuggestion set(String parameterName, Object value) {
        return (GenerateUserSuggestion) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getFeed".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetFeed#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param mode
     * @return the request
     */
    public GetFeed getFeed(java.lang.Long userId, java.lang.String mode) throws java.io.IOException {
      GetFeed result = new GetFeed(userId, mode);
      initialize(result);
      return result;
    }

    public class GetFeed extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.PostFeed> {

      private static final String REST_PATH = "postfeed/{userId}/{mode}";

      /**
       * Create a request for the method "userApi.getFeed".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetFeed#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetFeed#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param mode
       * @since 1.13
       */
      protected GetFeed(java.lang.Long userId, java.lang.String mode) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.PostFeed.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.mode = com.google.api.client.util.Preconditions.checkNotNull(mode, "Required parameter mode must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetFeed setAlt(java.lang.String alt) {
        return (GetFeed) super.setAlt(alt);
      }

      @Override
      public GetFeed setFields(java.lang.String fields) {
        return (GetFeed) super.setFields(fields);
      }

      @Override
      public GetFeed setKey(java.lang.String key) {
        return (GetFeed) super.setKey(key);
      }

      @Override
      public GetFeed setOauthToken(java.lang.String oauthToken) {
        return (GetFeed) super.setOauthToken(oauthToken);
      }

      @Override
      public GetFeed setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetFeed) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetFeed setQuotaUser(java.lang.String quotaUser) {
        return (GetFeed) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetFeed setUserIp(java.lang.String userIp) {
        return (GetFeed) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetFeed setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String mode;

      /**

       */
      public java.lang.String getMode() {
        return mode;
      }

      public GetFeed setMode(java.lang.String mode) {
        this.mode = mode;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public GetFeed setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @Override
      public GetFeed set(String parameterName, Object value) {
        return (GetFeed) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getFriendRequest".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetFriendRequest#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @return the request
     */
    public GetFriendRequest getFriendRequest(java.lang.Long userId) throws java.io.IOException {
      GetFriendRequest result = new GetFriendRequest(userId);
      initialize(result);
      return result;
    }

    public class GetFriendRequest extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.UserFriendRequestCollection> {

      private static final String REST_PATH = "userfriendrequestcollection/{userId}";

      /**
       * Create a request for the method "userApi.getFriendRequest".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetFriendRequest#execute()} method to invoke the remote operation.
       * <p> {@link GetFriendRequest#initialize(com.google.api.client.googleapis.services.AbstractGoogle
       * ClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param userId
       * @since 1.13
       */
      protected GetFriendRequest(java.lang.Long userId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.UserFriendRequestCollection.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetFriendRequest setAlt(java.lang.String alt) {
        return (GetFriendRequest) super.setAlt(alt);
      }

      @Override
      public GetFriendRequest setFields(java.lang.String fields) {
        return (GetFriendRequest) super.setFields(fields);
      }

      @Override
      public GetFriendRequest setKey(java.lang.String key) {
        return (GetFriendRequest) super.setKey(key);
      }

      @Override
      public GetFriendRequest setOauthToken(java.lang.String oauthToken) {
        return (GetFriendRequest) super.setOauthToken(oauthToken);
      }

      @Override
      public GetFriendRequest setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetFriendRequest) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetFriendRequest setQuotaUser(java.lang.String quotaUser) {
        return (GetFriendRequest) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetFriendRequest setUserIp(java.lang.String userIp) {
        return (GetFriendRequest) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetFriendRequest setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public GetFriendRequest set(String parameterName, Object value) {
        return (GetFriendRequest) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getNotification".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetNotification#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param mode
     * @return the request
     */
    public GetNotification getNotification(java.lang.Long userId, java.lang.String mode) throws java.io.IOException {
      GetNotification result = new GetNotification(userId, mode);
      initialize(result);
      return result;
    }

    public class GetNotification extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.Notification> {

      private static final String REST_PATH = "notification/{userId}/{mode}";

      /**
       * Create a request for the method "userApi.getNotification".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetNotification#execute()} method to invoke the remote operation.
       * <p> {@link GetNotification#initialize(com.google.api.client.googleapis.services.AbstractGoogleC
       * lientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param userId
       * @param mode
       * @since 1.13
       */
      protected GetNotification(java.lang.Long userId, java.lang.String mode) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.Notification.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.mode = com.google.api.client.util.Preconditions.checkNotNull(mode, "Required parameter mode must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetNotification setAlt(java.lang.String alt) {
        return (GetNotification) super.setAlt(alt);
      }

      @Override
      public GetNotification setFields(java.lang.String fields) {
        return (GetNotification) super.setFields(fields);
      }

      @Override
      public GetNotification setKey(java.lang.String key) {
        return (GetNotification) super.setKey(key);
      }

      @Override
      public GetNotification setOauthToken(java.lang.String oauthToken) {
        return (GetNotification) super.setOauthToken(oauthToken);
      }

      @Override
      public GetNotification setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetNotification) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetNotification setQuotaUser(java.lang.String quotaUser) {
        return (GetNotification) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetNotification setUserIp(java.lang.String userIp) {
        return (GetNotification) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetNotification setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String mode;

      /**

       */
      public java.lang.String getMode() {
        return mode;
      }

      public GetNotification setMode(java.lang.String mode) {
        this.mode = mode;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public GetNotification setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @Override
      public GetNotification set(String parameterName, Object value) {
        return (GetNotification) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getProfileView".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetProfileView#execute()} method to invoke the remote operation.
     *
     * @param appUserId
     * @return the request
     */
    public GetProfileView getProfileView(java.lang.Long appUserId) throws java.io.IOException {
      GetProfileView result = new GetProfileView(appUserId);
      initialize(result);
      return result;
    }

    public class GetProfileView extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.ProfileView> {

      private static final String REST_PATH = "profileview/{appUserId}";

      /**
       * Create a request for the method "userApi.getProfileView".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetProfileView#execute()} method to invoke the remote operation.
       * <p> {@link GetProfileView#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param appUserId
       * @since 1.13
       */
      protected GetProfileView(java.lang.Long appUserId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.ProfileView.class);
        this.appUserId = com.google.api.client.util.Preconditions.checkNotNull(appUserId, "Required parameter appUserId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetProfileView setAlt(java.lang.String alt) {
        return (GetProfileView) super.setAlt(alt);
      }

      @Override
      public GetProfileView setFields(java.lang.String fields) {
        return (GetProfileView) super.setFields(fields);
      }

      @Override
      public GetProfileView setKey(java.lang.String key) {
        return (GetProfileView) super.setKey(key);
      }

      @Override
      public GetProfileView setOauthToken(java.lang.String oauthToken) {
        return (GetProfileView) super.setOauthToken(oauthToken);
      }

      @Override
      public GetProfileView setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetProfileView) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetProfileView setQuotaUser(java.lang.String quotaUser) {
        return (GetProfileView) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetProfileView setUserIp(java.lang.String userIp) {
        return (GetProfileView) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long appUserId;

      /**

       */
      public java.lang.Long getAppUserId() {
        return appUserId;
      }

      public GetProfileView setAppUserId(java.lang.Long appUserId) {
        this.appUserId = appUserId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetProfileView setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String username;

      /**

       */
      public java.lang.String getUsername() {
        return username;
      }

      public GetProfileView setUsername(java.lang.String username) {
        this.username = username;
        return this;
      }

      @Override
      public GetProfileView set(String parameterName, Object value) {
        return (GetProfileView) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getRelation".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetRelation#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param relation
     * @return the request
     */
    public GetRelation getRelation(java.lang.Long userId, java.lang.String relation) throws java.io.IOException {
      GetRelation result = new GetRelation(userId, relation);
      initialize(result);
      return result;
    }

    public class GetRelation extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.UserCollection> {

      private static final String REST_PATH = "usercollection/{userId}/{relation}";

      /**
       * Create a request for the method "userApi.getRelation".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetRelation#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetRelation#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @param relation
       * @since 1.13
       */
      protected GetRelation(java.lang.Long userId, java.lang.String relation) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.UserCollection.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.relation = com.google.api.client.util.Preconditions.checkNotNull(relation, "Required parameter relation must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetRelation setAlt(java.lang.String alt) {
        return (GetRelation) super.setAlt(alt);
      }

      @Override
      public GetRelation setFields(java.lang.String fields) {
        return (GetRelation) super.setFields(fields);
      }

      @Override
      public GetRelation setKey(java.lang.String key) {
        return (GetRelation) super.setKey(key);
      }

      @Override
      public GetRelation setOauthToken(java.lang.String oauthToken) {
        return (GetRelation) super.setOauthToken(oauthToken);
      }

      @Override
      public GetRelation setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetRelation) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetRelation setQuotaUser(java.lang.String quotaUser) {
        return (GetRelation) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetRelation setUserIp(java.lang.String userIp) {
        return (GetRelation) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetRelation setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String relation;

      /**

       */
      public java.lang.String getRelation() {
        return relation;
      }

      public GetRelation setRelation(java.lang.String relation) {
        this.relation = relation;
        return this;
      }

      @Override
      public GetRelation set(String parameterName, Object value) {
        return (GetRelation) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getSavedPost".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetSavedPost#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @return the request
     */
    public GetSavedPost getSavedPost(java.lang.Long userId) throws java.io.IOException {
      GetSavedPost result = new GetSavedPost(userId);
      initialize(result);
      return result;
    }

    public class GetSavedPost extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.PostFeed> {

      private static final String REST_PATH = "postfeed/{userId}";

      /**
       * Create a request for the method "userApi.getSavedPost".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetSavedPost#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetSavedPost#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @since 1.13
       */
      protected GetSavedPost(java.lang.Long userId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.PostFeed.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetSavedPost setAlt(java.lang.String alt) {
        return (GetSavedPost) super.setAlt(alt);
      }

      @Override
      public GetSavedPost setFields(java.lang.String fields) {
        return (GetSavedPost) super.setFields(fields);
      }

      @Override
      public GetSavedPost setKey(java.lang.String key) {
        return (GetSavedPost) super.setKey(key);
      }

      @Override
      public GetSavedPost setOauthToken(java.lang.String oauthToken) {
        return (GetSavedPost) super.setOauthToken(oauthToken);
      }

      @Override
      public GetSavedPost setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetSavedPost) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetSavedPost setQuotaUser(java.lang.String quotaUser) {
        return (GetSavedPost) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetSavedPost setUserIp(java.lang.String userIp) {
        return (GetSavedPost) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetSavedPost setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public GetSavedPost setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @Override
      public GetSavedPost set(String parameterName, Object value) {
        return (GetSavedPost) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getStoriesFeed".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetStoriesFeed#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param mode
     * @return the request
     */
    public GetStoriesFeed getStoriesFeed(java.lang.Long userId, java.lang.String mode) throws java.io.IOException {
      GetStoriesFeed result = new GetStoriesFeed(userId, mode);
      initialize(result);
      return result;
    }

    public class GetStoriesFeed extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.StoryFeedCollection> {

      private static final String REST_PATH = "getStoriesFeed/{userId}/{mode}";

      /**
       * Create a request for the method "userApi.getStoriesFeed".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetStoriesFeed#execute()} method to invoke the remote operation.
       * <p> {@link GetStoriesFeed#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param userId
       * @param mode
       * @since 1.13
       */
      protected GetStoriesFeed(java.lang.Long userId, java.lang.String mode) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.StoryFeedCollection.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.mode = com.google.api.client.util.Preconditions.checkNotNull(mode, "Required parameter mode must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetStoriesFeed setAlt(java.lang.String alt) {
        return (GetStoriesFeed) super.setAlt(alt);
      }

      @Override
      public GetStoriesFeed setFields(java.lang.String fields) {
        return (GetStoriesFeed) super.setFields(fields);
      }

      @Override
      public GetStoriesFeed setKey(java.lang.String key) {
        return (GetStoriesFeed) super.setKey(key);
      }

      @Override
      public GetStoriesFeed setOauthToken(java.lang.String oauthToken) {
        return (GetStoriesFeed) super.setOauthToken(oauthToken);
      }

      @Override
      public GetStoriesFeed setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetStoriesFeed) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetStoriesFeed setQuotaUser(java.lang.String quotaUser) {
        return (GetStoriesFeed) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetStoriesFeed setUserIp(java.lang.String userIp) {
        return (GetStoriesFeed) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetStoriesFeed setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String mode;

      /**

       */
      public java.lang.String getMode() {
        return mode;
      }

      public GetStoriesFeed setMode(java.lang.String mode) {
        this.mode = mode;
        return this;
      }

      @Override
      public GetStoriesFeed set(String parameterName, Object value) {
        return (GetStoriesFeed) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getUpdateFeed".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetUpdateFeed#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param alertId
     * @param mode
     * @return the request
     */
    public GetUpdateFeed getUpdateFeed(java.lang.Long userId, java.lang.Long alertId, java.lang.String mode) throws java.io.IOException {
      GetUpdateFeed result = new GetUpdateFeed(userId, alertId, mode);
      initialize(result);
      return result;
    }

    public class GetUpdateFeed extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.PostFeed> {

      private static final String REST_PATH = "postfeed/{userId}/{alertId}/{mode}";

      /**
       * Create a request for the method "userApi.getUpdateFeed".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetUpdateFeed#execute()} method to invoke the remote operation. <p>
       * {@link GetUpdateFeed#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param userId
       * @param alertId
       * @param mode
       * @since 1.13
       */
      protected GetUpdateFeed(java.lang.Long userId, java.lang.Long alertId, java.lang.String mode) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.PostFeed.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.alertId = com.google.api.client.util.Preconditions.checkNotNull(alertId, "Required parameter alertId must be specified.");
        this.mode = com.google.api.client.util.Preconditions.checkNotNull(mode, "Required parameter mode must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetUpdateFeed setAlt(java.lang.String alt) {
        return (GetUpdateFeed) super.setAlt(alt);
      }

      @Override
      public GetUpdateFeed setFields(java.lang.String fields) {
        return (GetUpdateFeed) super.setFields(fields);
      }

      @Override
      public GetUpdateFeed setKey(java.lang.String key) {
        return (GetUpdateFeed) super.setKey(key);
      }

      @Override
      public GetUpdateFeed setOauthToken(java.lang.String oauthToken) {
        return (GetUpdateFeed) super.setOauthToken(oauthToken);
      }

      @Override
      public GetUpdateFeed setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetUpdateFeed) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetUpdateFeed setQuotaUser(java.lang.String quotaUser) {
        return (GetUpdateFeed) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetUpdateFeed setUserIp(java.lang.String userIp) {
        return (GetUpdateFeed) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetUpdateFeed setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long alertId;

      /**

       */
      public java.lang.Long getAlertId() {
        return alertId;
      }

      public GetUpdateFeed setAlertId(java.lang.Long alertId) {
        this.alertId = alertId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String mode;

      /**

       */
      public java.lang.String getMode() {
        return mode;
      }

      public GetUpdateFeed setMode(java.lang.String mode) {
        this.mode = mode;
        return this;
      }

      @Override
      public GetUpdateFeed set(String parameterName, Object value) {
        return (GetUpdateFeed) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getUpdateNotification".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetUpdateNotification#execute()} method to invoke the remote
     * operation.
     *
     * @param userId
     * @param mode
     * @param alertId
     * @return the request
     */
    public GetUpdateNotification getUpdateNotification(java.lang.Long userId, java.lang.String mode, java.lang.Long alertId) throws java.io.IOException {
      GetUpdateNotification result = new GetUpdateNotification(userId, mode, alertId);
      initialize(result);
      return result;
    }

    public class GetUpdateNotification extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.Notification> {

      private static final String REST_PATH = "notification/{userId}/{mode}/{alertId}";

      /**
       * Create a request for the method "userApi.getUpdateNotification".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetUpdateNotification#execute()} method to invoke the remote
       * operation. <p> {@link GetUpdateNotification#initialize(com.google.api.client.googleapis.service
       * s.AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param userId
       * @param mode
       * @param alertId
       * @since 1.13
       */
      protected GetUpdateNotification(java.lang.Long userId, java.lang.String mode, java.lang.Long alertId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.Notification.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.mode = com.google.api.client.util.Preconditions.checkNotNull(mode, "Required parameter mode must be specified.");
        this.alertId = com.google.api.client.util.Preconditions.checkNotNull(alertId, "Required parameter alertId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetUpdateNotification setAlt(java.lang.String alt) {
        return (GetUpdateNotification) super.setAlt(alt);
      }

      @Override
      public GetUpdateNotification setFields(java.lang.String fields) {
        return (GetUpdateNotification) super.setFields(fields);
      }

      @Override
      public GetUpdateNotification setKey(java.lang.String key) {
        return (GetUpdateNotification) super.setKey(key);
      }

      @Override
      public GetUpdateNotification setOauthToken(java.lang.String oauthToken) {
        return (GetUpdateNotification) super.setOauthToken(oauthToken);
      }

      @Override
      public GetUpdateNotification setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetUpdateNotification) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetUpdateNotification setQuotaUser(java.lang.String quotaUser) {
        return (GetUpdateNotification) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetUpdateNotification setUserIp(java.lang.String userIp) {
        return (GetUpdateNotification) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetUpdateNotification setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String mode;

      /**

       */
      public java.lang.String getMode() {
        return mode;
      }

      public GetUpdateNotification setMode(java.lang.String mode) {
        this.mode = mode;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Long alertId;

      /**

       */
      public java.lang.Long getAlertId() {
        return alertId;
      }

      public GetUpdateNotification setAlertId(java.lang.Long alertId) {
        this.alertId = alertId;
        return this;
      }

      @Override
      public GetUpdateNotification set(String parameterName, Object value) {
        return (GetUpdateNotification) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getUpdationAlert".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetUpdationAlert#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @return the request
     */
    public GetUpdationAlert getUpdationAlert(java.lang.Long userId) throws java.io.IOException {
      GetUpdationAlert result = new GetUpdationAlert(userId);
      initialize(result);
      return result;
    }

    public class GetUpdationAlert extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.UserAlert> {

      private static final String REST_PATH = "useralert/{userId}";

      /**
       * Create a request for the method "userApi.getUpdationAlert".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetUpdationAlert#execute()} method to invoke the remote operation.
       * <p> {@link GetUpdationAlert#initialize(com.google.api.client.googleapis.services.AbstractGoogle
       * ClientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param userId
       * @since 1.13
       */
      protected GetUpdationAlert(java.lang.Long userId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.UserAlert.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetUpdationAlert setAlt(java.lang.String alt) {
        return (GetUpdationAlert) super.setAlt(alt);
      }

      @Override
      public GetUpdationAlert setFields(java.lang.String fields) {
        return (GetUpdationAlert) super.setFields(fields);
      }

      @Override
      public GetUpdationAlert setKey(java.lang.String key) {
        return (GetUpdationAlert) super.setKey(key);
      }

      @Override
      public GetUpdationAlert setOauthToken(java.lang.String oauthToken) {
        return (GetUpdationAlert) super.setOauthToken(oauthToken);
      }

      @Override
      public GetUpdationAlert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetUpdationAlert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetUpdationAlert setQuotaUser(java.lang.String quotaUser) {
        return (GetUpdationAlert) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetUpdationAlert setUserIp(java.lang.String userIp) {
        return (GetUpdationAlert) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetUpdationAlert setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public GetUpdationAlert set(String parameterName, Object value) {
        return (GetUpdationAlert) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getUser".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetUser#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @return the request
     */
    public GetUser getUser(java.lang.Long userId) throws java.io.IOException {
      GetUser result = new GetUser(userId);
      initialize(result);
      return result;
    }

    public class GetUser extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.User> {

      private static final String REST_PATH = "user/{userId}";

      /**
       * Create a request for the method "userApi.getUser".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetUser#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetUser#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @since 1.13
       */
      protected GetUser(java.lang.Long userId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.User.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetUser setAlt(java.lang.String alt) {
        return (GetUser) super.setAlt(alt);
      }

      @Override
      public GetUser setFields(java.lang.String fields) {
        return (GetUser) super.setFields(fields);
      }

      @Override
      public GetUser setKey(java.lang.String key) {
        return (GetUser) super.setKey(key);
      }

      @Override
      public GetUser setOauthToken(java.lang.String oauthToken) {
        return (GetUser) super.setOauthToken(oauthToken);
      }

      @Override
      public GetUser setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetUser) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetUser setQuotaUser(java.lang.String quotaUser) {
        return (GetUser) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetUser setUserIp(java.lang.String userIp) {
        return (GetUser) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetUser setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public GetUser set(String parameterName, Object value) {
        return (GetUser) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getUserPost".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetUserPost#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @return the request
     */
    public GetUserPost getUserPost(java.lang.Long userId) throws java.io.IOException {
      GetUserPost result = new GetUserPost(userId);
      initialize(result);
      return result;
    }

    public class GetUserPost extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.PostFeed> {

      private static final String REST_PATH = "getUserPost/{userId}";

      /**
       * Create a request for the method "userApi.getUserPost".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetUserPost#execute()} method to invoke the remote operation. <p>
       * {@link
       * GetUserPost#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param userId
       * @since 1.13
       */
      protected GetUserPost(java.lang.Long userId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.PostFeed.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetUserPost setAlt(java.lang.String alt) {
        return (GetUserPost) super.setAlt(alt);
      }

      @Override
      public GetUserPost setFields(java.lang.String fields) {
        return (GetUserPost) super.setFields(fields);
      }

      @Override
      public GetUserPost setKey(java.lang.String key) {
        return (GetUserPost) super.setKey(key);
      }

      @Override
      public GetUserPost setOauthToken(java.lang.String oauthToken) {
        return (GetUserPost) super.setOauthToken(oauthToken);
      }

      @Override
      public GetUserPost setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetUserPost) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetUserPost setQuotaUser(java.lang.String quotaUser) {
        return (GetUserPost) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetUserPost setUserIp(java.lang.String userIp) {
        return (GetUserPost) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetUserPost setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String postMode;

      /**

       */
      public java.lang.String getPostMode() {
        return postMode;
      }

      public GetUserPost setPostMode(java.lang.String postMode) {
        this.postMode = postMode;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public GetUserPost setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @Override
      public GetUserPost set(String parameterName, Object value) {
        return (GetUserPost) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.getUserProfile".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link GetUserProfile#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @return the request
     */
    public GetUserProfile getUserProfile(java.lang.Long userId) throws java.io.IOException {
      GetUserProfile result = new GetUserProfile(userId);
      initialize(result);
      return result;
    }

    public class GetUserProfile extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.UserProfile> {

      private static final String REST_PATH = "userprofile/{userId}";

      /**
       * Create a request for the method "userApi.getUserProfile".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link GetUserProfile#execute()} method to invoke the remote operation.
       * <p> {@link GetUserProfile#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
       * ientRequest)} must be called to initialize this instance immediately after invoking the
       * constructor. </p>
       *
       * @param userId
       * @since 1.13
       */
      protected GetUserProfile(java.lang.Long userId) {
        super(Zeem.this, "GET", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.UserProfile.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetUserProfile setAlt(java.lang.String alt) {
        return (GetUserProfile) super.setAlt(alt);
      }

      @Override
      public GetUserProfile setFields(java.lang.String fields) {
        return (GetUserProfile) super.setFields(fields);
      }

      @Override
      public GetUserProfile setKey(java.lang.String key) {
        return (GetUserProfile) super.setKey(key);
      }

      @Override
      public GetUserProfile setOauthToken(java.lang.String oauthToken) {
        return (GetUserProfile) super.setOauthToken(oauthToken);
      }

      @Override
      public GetUserProfile setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetUserProfile) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetUserProfile setQuotaUser(java.lang.String quotaUser) {
        return (GetUserProfile) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetUserProfile setUserIp(java.lang.String userIp) {
        return (GetUserProfile) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public GetUserProfile setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @Override
      public GetUserProfile set(String parameterName, Object value) {
        return (GetUserProfile) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.refreshFirebaseToken".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link RefreshFirebaseToken#execute()} method to invoke the remote
     * operation.
     *
     * @param userId
     * @param firebaseToken
     * @return the request
     */
    public RefreshFirebaseToken refreshFirebaseToken(java.lang.Long userId, java.lang.String firebaseToken) throws java.io.IOException {
      RefreshFirebaseToken result = new RefreshFirebaseToken(userId, firebaseToken);
      initialize(result);
      return result;
    }

    public class RefreshFirebaseToken extends ZeemRequest<Void> {

      private static final String REST_PATH = "refreshFirebaseToken/{userId}/{firebaseToken}";

      /**
       * Create a request for the method "userApi.refreshFirebaseToken".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link RefreshFirebaseToken#execute()} method to invoke the remote
       * operation. <p> {@link RefreshFirebaseToken#initialize(com.google.api.client.googleapis.services
       * .AbstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param userId
       * @param firebaseToken
       * @since 1.13
       */
      protected RefreshFirebaseToken(java.lang.Long userId, java.lang.String firebaseToken) {
        super(Zeem.this, "POST", REST_PATH, null, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.firebaseToken = com.google.api.client.util.Preconditions.checkNotNull(firebaseToken, "Required parameter firebaseToken must be specified.");
      }

      @Override
      public RefreshFirebaseToken setAlt(java.lang.String alt) {
        return (RefreshFirebaseToken) super.setAlt(alt);
      }

      @Override
      public RefreshFirebaseToken setFields(java.lang.String fields) {
        return (RefreshFirebaseToken) super.setFields(fields);
      }

      @Override
      public RefreshFirebaseToken setKey(java.lang.String key) {
        return (RefreshFirebaseToken) super.setKey(key);
      }

      @Override
      public RefreshFirebaseToken setOauthToken(java.lang.String oauthToken) {
        return (RefreshFirebaseToken) super.setOauthToken(oauthToken);
      }

      @Override
      public RefreshFirebaseToken setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (RefreshFirebaseToken) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public RefreshFirebaseToken setQuotaUser(java.lang.String quotaUser) {
        return (RefreshFirebaseToken) super.setQuotaUser(quotaUser);
      }

      @Override
      public RefreshFirebaseToken setUserIp(java.lang.String userIp) {
        return (RefreshFirebaseToken) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public RefreshFirebaseToken setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String firebaseToken;

      /**

       */
      public java.lang.String getFirebaseToken() {
        return firebaseToken;
      }

      public RefreshFirebaseToken setFirebaseToken(java.lang.String firebaseToken) {
        this.firebaseToken = firebaseToken;
        return this;
      }

      @Override
      public RefreshFirebaseToken set(String parameterName, Object value) {
        return (RefreshFirebaseToken) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.sendInstantMessage".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link SendInstantMessage#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.octabyte_zeem.zeem.model.ChatMessage}
     * @return the request
     */
    public SendInstantMessage sendInstantMessage(com.appspot.octabyte_zeem.zeem.model.ChatMessage content) throws java.io.IOException {
      SendInstantMessage result = new SendInstantMessage(content);
      initialize(result);
      return result;
    }

    public class SendInstantMessage extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.TaskComplete> {

      private static final String REST_PATH = "sendInstantMessage";

      /**
       * Create a request for the method "userApi.sendInstantMessage".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link SendInstantMessage#execute()} method to invoke the remote
       * operation. <p> {@link SendInstantMessage#initialize(com.google.api.client.googleapis.services.A
       * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.octabyte_zeem.zeem.model.ChatMessage}
       * @since 1.13
       */
      protected SendInstantMessage(com.appspot.octabyte_zeem.zeem.model.ChatMessage content) {
        super(Zeem.this, "POST", REST_PATH, content, com.appspot.octabyte_zeem.zeem.model.TaskComplete.class);
      }

      @Override
      public SendInstantMessage setAlt(java.lang.String alt) {
        return (SendInstantMessage) super.setAlt(alt);
      }

      @Override
      public SendInstantMessage setFields(java.lang.String fields) {
        return (SendInstantMessage) super.setFields(fields);
      }

      @Override
      public SendInstantMessage setKey(java.lang.String key) {
        return (SendInstantMessage) super.setKey(key);
      }

      @Override
      public SendInstantMessage setOauthToken(java.lang.String oauthToken) {
        return (SendInstantMessage) super.setOauthToken(oauthToken);
      }

      @Override
      public SendInstantMessage setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SendInstantMessage) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SendInstantMessage setQuotaUser(java.lang.String quotaUser) {
        return (SendInstantMessage) super.setQuotaUser(quotaUser);
      }

      @Override
      public SendInstantMessage setUserIp(java.lang.String userIp) {
        return (SendInstantMessage) super.setUserIp(userIp);
      }

      @Override
      public SendInstantMessage set(String parameterName, Object value) {
        return (SendInstantMessage) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.updateProfile".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link UpdateProfile#execute()} method to invoke the remote operation.
     *
     * @param myUserId
     * @return the request
     */
    public UpdateProfile updateProfile(java.lang.Long myUserId) throws java.io.IOException {
      UpdateProfile result = new UpdateProfile(myUserId);
      initialize(result);
      return result;
    }

    public class UpdateProfile extends ZeemRequest<Void> {

      private static final String REST_PATH = "void/{myUserId}";

      /**
       * Create a request for the method "userApi.updateProfile".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link UpdateProfile#execute()} method to invoke the remote operation. <p>
       * {@link UpdateProfile#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param myUserId
       * @since 1.13
       */
      protected UpdateProfile(java.lang.Long myUserId) {
        super(Zeem.this, "PUT", REST_PATH, null, Void.class);
        this.myUserId = com.google.api.client.util.Preconditions.checkNotNull(myUserId, "Required parameter myUserId must be specified.");
      }

      @Override
      public UpdateProfile setAlt(java.lang.String alt) {
        return (UpdateProfile) super.setAlt(alt);
      }

      @Override
      public UpdateProfile setFields(java.lang.String fields) {
        return (UpdateProfile) super.setFields(fields);
      }

      @Override
      public UpdateProfile setKey(java.lang.String key) {
        return (UpdateProfile) super.setKey(key);
      }

      @Override
      public UpdateProfile setOauthToken(java.lang.String oauthToken) {
        return (UpdateProfile) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateProfile setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateProfile) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateProfile setQuotaUser(java.lang.String quotaUser) {
        return (UpdateProfile) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateProfile setUserIp(java.lang.String userIp) {
        return (UpdateProfile) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long myUserId;

      /**

       */
      public java.lang.Long getMyUserId() {
        return myUserId;
      }

      public UpdateProfile setMyUserId(java.lang.Long myUserId) {
        this.myUserId = myUserId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String fullName;

      /**

       */
      public java.lang.String getFullName() {
        return fullName;
      }

      public UpdateProfile setFullName(java.lang.String fullName) {
        this.fullName = fullName;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String profilePic;

      /**

       */
      public java.lang.String getProfilePic() {
        return profilePic;
      }

      public UpdateProfile setProfilePic(java.lang.String profilePic) {
        this.profilePic = profilePic;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String email;

      /**

       */
      public java.lang.String getEmail() {
        return email;
      }

      public UpdateProfile setEmail(java.lang.String email) {
        this.email = email;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String status;

      /**

       */
      public java.lang.String getStatus() {
        return status;
      }

      public UpdateProfile setStatus(java.lang.String status) {
        this.status = status;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer dob;

      /**

       */
      public java.lang.Integer getDob() {
        return dob;
      }

      public UpdateProfile setDob(java.lang.Integer dob) {
        this.dob = dob;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String gender;

      /**

       */
      public java.lang.String getGender() {
        return gender;
      }

      public UpdateProfile setGender(java.lang.String gender) {
        this.gender = gender;
        return this;
      }

      @Override
      public UpdateProfile set(String parameterName, Object value) {
        return (UpdateProfile) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.updateSetting".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link UpdateSetting#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @return the request
     */
    public UpdateSetting updateSetting(java.lang.Long userId) throws java.io.IOException {
      UpdateSetting result = new UpdateSetting(userId);
      initialize(result);
      return result;
    }

    public class UpdateSetting extends ZeemRequest<com.appspot.octabyte_zeem.zeem.model.TaskComplete> {

      private static final String REST_PATH = "taskcomplete/{userId}";

      /**
       * Create a request for the method "userApi.updateSetting".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link UpdateSetting#execute()} method to invoke the remote operation. <p>
       * {@link UpdateSetting#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param userId
       * @since 1.13
       */
      protected UpdateSetting(java.lang.Long userId) {
        super(Zeem.this, "PUT", REST_PATH, null, com.appspot.octabyte_zeem.zeem.model.TaskComplete.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      }

      @Override
      public UpdateSetting setAlt(java.lang.String alt) {
        return (UpdateSetting) super.setAlt(alt);
      }

      @Override
      public UpdateSetting setFields(java.lang.String fields) {
        return (UpdateSetting) super.setFields(fields);
      }

      @Override
      public UpdateSetting setKey(java.lang.String key) {
        return (UpdateSetting) super.setKey(key);
      }

      @Override
      public UpdateSetting setOauthToken(java.lang.String oauthToken) {
        return (UpdateSetting) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateSetting setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateSetting) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateSetting setQuotaUser(java.lang.String quotaUser) {
        return (UpdateSetting) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateSetting setUserIp(java.lang.String userIp) {
        return (UpdateSetting) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public UpdateSetting setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String showTagPost;

      /**

       */
      public java.lang.String getShowTagPost() {
        return showTagPost;
      }

      public UpdateSetting setShowTagPost(java.lang.String showTagPost) {
        this.showTagPost = showTagPost;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String postTag;

      /**

       */
      public java.lang.String getPostTag() {
        return postTag;
      }

      public UpdateSetting setPostTag(java.lang.String postTag) {
        this.postTag = postTag;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Boolean anonymousTag;

      /**

       */
      public java.lang.Boolean getAnonymousTag() {
        return anonymousTag;
      }

      public UpdateSetting setAnonymousTag(java.lang.Boolean anonymousTag) {
        this.anonymousTag = anonymousTag;
        return this;
      }

      @Override
      public UpdateSetting set(String parameterName, Object value) {
        return (UpdateSetting) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "userApi.updateUserLocation".
     *
     * This request holds the parameters needed by the zeem server.  After setting any optional
     * parameters, call the {@link UpdateUserLocation#execute()} method to invoke the remote operation.
     *
     * @param userId
     * @param lat
     * @param lng
     * @return the request
     */
    public UpdateUserLocation updateUserLocation(java.lang.Long userId, java.lang.Double lat, java.lang.Double lng) throws java.io.IOException {
      UpdateUserLocation result = new UpdateUserLocation(userId, lat, lng);
      initialize(result);
      return result;
    }

    public class UpdateUserLocation extends ZeemRequest<Void> {

      private static final String REST_PATH = "void/{userId}/{lat}/{lng}";

      /**
       * Create a request for the method "userApi.updateUserLocation".
       *
       * This request holds the parameters needed by the the zeem server.  After setting any optional
       * parameters, call the {@link UpdateUserLocation#execute()} method to invoke the remote
       * operation. <p> {@link UpdateUserLocation#initialize(com.google.api.client.googleapis.services.A
       * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
       * invoking the constructor. </p>
       *
       * @param userId
       * @param lat
       * @param lng
       * @since 1.13
       */
      protected UpdateUserLocation(java.lang.Long userId, java.lang.Double lat, java.lang.Double lng) {
        super(Zeem.this, "PUT", REST_PATH, null, Void.class);
        this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        this.lat = com.google.api.client.util.Preconditions.checkNotNull(lat, "Required parameter lat must be specified.");
        this.lng = com.google.api.client.util.Preconditions.checkNotNull(lng, "Required parameter lng must be specified.");
      }

      @Override
      public UpdateUserLocation setAlt(java.lang.String alt) {
        return (UpdateUserLocation) super.setAlt(alt);
      }

      @Override
      public UpdateUserLocation setFields(java.lang.String fields) {
        return (UpdateUserLocation) super.setFields(fields);
      }

      @Override
      public UpdateUserLocation setKey(java.lang.String key) {
        return (UpdateUserLocation) super.setKey(key);
      }

      @Override
      public UpdateUserLocation setOauthToken(java.lang.String oauthToken) {
        return (UpdateUserLocation) super.setOauthToken(oauthToken);
      }

      @Override
      public UpdateUserLocation setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (UpdateUserLocation) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public UpdateUserLocation setQuotaUser(java.lang.String quotaUser) {
        return (UpdateUserLocation) super.setQuotaUser(quotaUser);
      }

      @Override
      public UpdateUserLocation setUserIp(java.lang.String userIp) {
        return (UpdateUserLocation) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long userId;

      /**

       */
      public java.lang.Long getUserId() {
        return userId;
      }

      public UpdateUserLocation setUserId(java.lang.Long userId) {
        this.userId = userId;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Double lat;

      /**

       */
      public java.lang.Double getLat() {
        return lat;
      }

      public UpdateUserLocation setLat(java.lang.Double lat) {
        this.lat = lat;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Double lng;

      /**

       */
      public java.lang.Double getLng() {
        return lng;
      }

      public UpdateUserLocation setLng(java.lang.Double lng) {
        this.lng = lng;
        return this;
      }

      @Override
      public UpdateUserLocation set(String parameterName, Object value) {
        return (UpdateUserLocation) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Zeem}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Zeem}. */
    @Override
    public Zeem build() {
      return new Zeem(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ZeemRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setZeemRequestInitializer(
        ZeemRequestInitializer zeemRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(zeemRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
